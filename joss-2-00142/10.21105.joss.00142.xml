<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>shmlast: An improved implementation of Conditional Reciprocal Best Hits with LAST and Python</title>
    <authors>
      <author>
        <name>Camille Scott</name>
        <orcid>0000-0001-8822-8779</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>bioinformatics</tag>
      <tag>orthology</tag>
      <tag>alignment</tag>
      <tag>LAST</tag>
      <tag>BLAST</tag>
      <tag>python</tag>
    </tags>
    <date>21 November 2016</date>
    <paper_doi>10.21105/joss.00142</paper_doi>
    <software_repository>https://github.com/camillescott/shmlast</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.260437</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00142/10.21105.joss.00142.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Conditional Reciprocal Best Hits (CRBH) was originally described by Aubry et al.<span class="citation">(Aubry et al. 2014)</span> and implemented in the <a href="https://github.com/cboursnell/crb-blast">crb-blast</a> package. CRBH is a method for finding orthologs between two sets of sequences which builds on the traditional Reciprocal Best Hits (RBH) method; it improves RBH by finding an expect-value cutoff per alignment length, and then selecting non-reciprocal alignments which meet the minimum threshold.</p>
    <p>Unfortunately, the original implementation uses the relatively slow NCBI BLAST+ <span class="citation">(Altschul et al. 1990)</span>, and is implemented in Ruby, which requires users to leave the Python-dominated bioinformatics ecosystem. shmlast makes CRBH available to users in Python, while also greatly improving performance by using the LAST aligner <span class="citation">(Kiełbasa et al. 2011)</span> for initial homology searches. Other improvements include outputting the list of cutoffs generated by its model along with a plot of the decision boundary to aid in quality control, as well as using gnu-parallel <span class="citation">(Tange 2011)</span> to parallelize execution across multiple cores or nodes in a cluster environment.</p>
    <h1 id="methods">Methods</h1>
    <p>RBH is a relatively old method for determining orthologs between two sequence databases. Orthology is distinguished from sequence similarity by descent; while two sequences with high similarity are likely to have structural of functional homology, they are orthologous if they share a common ancestor sequence. It is difficult to know for sure whether two sequences are orthologs, but orthologous groups of sequences are critical for a variety of analyses surrounding structure, function, and evolution, and particularly, for annotation. As such, many methods have been developed for separating high-similarity alignments from their orthologous counterparts. RBH is the regal elder of these methods, and although it is simplistic compared to newer clustering and graph-based methods, it remains in wide use due to its low false-positive rate and ease of implementation. It is performed as follows: given two sets of sequences <span class="math inline"><em>A</em></span> and <span class="math inline"><em>B</em></span>, sequences <span class="math inline"><em>a</em><sub><em>i</em></sub> ∈ <em>A</em></span> and <span class="math inline"><em>b</em><sub><em>j</em></sub> ∈ <em>B</em></span> are Reciprocal Best Hits if <span class="math inline"><em>b</em><sub><em>j</em></sub></span> has the highest scoring sequence alignment in <span class="math inline"><em>B</em></span> for <span class="math inline"><em>a</em><sub><em>i</em></sub></span> and <span class="math inline"><em>a</em><sub><em>i</em></sub></span> has the highest scoring sequence alignment in <span class="math inline"><em>A</em></span> for <span class="math inline"><em>b</em><sub><em>j</em></sub></span>. <span class="math inline"><em>a</em><sub><em>i</em></sub></span> and <span class="math inline"><em>b</em><sub><em>j</em></sub></span> then have a high probability of being orthologs.</p>
    <p>While this method works well for finding orthologs between two sets of proteins from different species, it is less effective for annotating newly assembled transcriptomes from existing protein databases. Transcriptomes are confounded by alternative splicing, causing several transcripts to share subsequences, which may prevent RBH detection between a translated transcript and its protein, even when an orthology relationship exists. Aubry et al., and this implementation, circumvent that problem by first using the reciprocals to establish a score cutoff for each alignment length, and then keeping <em>any</em> alignment which passes that cutoff. This prevents alignments with high-likelihood of being orthologs based on sequence identity from being discarded due to the high specificity of RBH.</p>
    <h1 id="performance">Performance</h1>
    <p>shmlast benefits immensely from the use of LAST over BLAST. It scales well by using gnu-parallel, and can be distributed across clusters for particularly large runs.</p>
    <div class="figure">
    <embed src="../perf/results.pdf" />
    <p class="caption">Performance comparison with <a href="ftp://ftp.ebi.ac.uk/pub/databases/pombase/FASTA/cdna_nointrons_utrs.fa.gz"><em>Schizosaccharomyces pombe</em></a> <span class="citation">(Wood et al. 2012)</span> as the query transcriptome and <a href="ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/Eukaryota/UP000001593_45351.fasta.gz"><em>Nematostella vectensis</em></a> <span class="citation">(Apweiler, Bairoch, and Wu 2004)</span> as the target proteome.</p>
    </div>
    <div class="figure">
    <embed src="sacPom.cdna.fa.x.Nematostella_vectensis.uniprot.pep.fa.crbl.model.plot.pdf" />
    <p class="caption">CRBH model generated from the performance comparison. Hits with scores above the blue dotted line will be kept.</p>
    </div>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-altschul_basic_1990">
    <p>Altschul, S. F., W. Gish, W. Miller, E. W. Myers, and D. J. Lipman. 1990. “Basic Local Alignment Search Tool.” <em>Journal of Molecular Biology</em> 215 (3): 403–10. doi:<a href="https://doi.org/10.1016/S0022-2836(05)80360-2">10.1016/S0022-2836(05)80360-2</a>.</p>
    </div>
    <div id="ref-apweiler_protein_2004">
    <p>Apweiler, Rolf, Amos Bairoch, and Cathy H Wu. 2004. “Protein Sequence Databases.” <em>Current Opinion in Chemical Biology</em> 8 (1): 76–80. doi:<a href="https://doi.org/10.1016/j.cbpa.2003.12.004">10.1016/j.cbpa.2003.12.004</a>.</p>
    </div>
    <div id="ref-aubry_deep_2014">
    <p>Aubry, Sylvain, Steven Kelly, Britta M. C. Kümpers, Richard D. Smith-Unna, and Julian M. Hibberd. 2014. “Deep Evolutionary Comparison of Gene Expression Identifies Parallel Recruitment of Trans -Factors in Two Independent Origins of C 4 Photosynthesis.” <em>PLOS Genet</em> 10 (6): e1004365. doi:<a href="https://doi.org/10.1371/journal.pgen.1004365">10.1371/journal.pgen.1004365</a>.</p>
    </div>
    <div id="ref-kielbasa_adaptive_2011">
    <p>Kiełbasa, Szymon M., Raymond Wan, Kengo Sato, Paul Horton, and Martin C. Frith. 2011. “Adaptive Seeds Tame Genomic Sequence Comparison.” <em>Genome Research</em> 21 (3): 487–93. doi:<a href="https://doi.org/10.1101/gr.113985.110">10.1101/gr.113985.110</a>.</p>
    </div>
    <div id="ref-tange_gnu_2011">
    <p>Tange, O. 2011. “GNU Parallel - The Command-Line Power Tool.”<em>;Login: The USENIX Magazine</em> 36 (1): 42–47. doi:<a href="https://doi.org/10.5281/zenodo.16303">10.5281/zenodo.16303</a>.</p>
    </div>
    <div id="ref-wood_pombase:_2012">
    <p>Wood, Valerie, Midori A. Harris, Mark D. McDowall, Kim Rutherford, Brendan W. Vaughan, Daniel M. Staines, Martin Aslett, et al. 2012. “PomBase: A Comprehensive Online Resource for Fission Yeast.” <em>Nucleic Acids Research</em> 40 (D1): D695–D699. doi:<a href="https://doi.org/10.1093/nar/gkr853">10.1093/nar/gkr853</a>.</p>
    </div>
    </div>
  </body>
</article>
