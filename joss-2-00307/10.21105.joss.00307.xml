<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>root_numpy: The interface between ROOT and NumPy</title>
    <authors>
      <author>
        <name>Edmund Noel Dawe</name>
        <orcid>0000-0003-0202-3284</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Piti Ongmongkolkul</name>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Giordon Stark</name>
        <orcid>0000-0001-6616-3433</orcid>
        <affiliation>
          <orgname>
            3
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>Python</tag>
      <tag>C++</tag>
      <tag>ROOT</tag>
      <tag>NumPy</tag>
      <tag>CERN</tag>
    </tags>
    <date>11 May 2017</date>
    <paper_doi>10.21105/joss.00307</paper_doi>
    <software_repository>https://github.com/scikit-hep/root_numpy</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.842249</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/raw/master/joss.00307/10.21105.joss.00307.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>root_numpy interfaces NumPy <span class="citation">(Walt, Colbert, and Varoquaux 2011)</span> with CERN's ROOT <span class="citation">(Antcheva et al. 2009)</span> software framework, providing the ability to analyse ROOT data within the broad ecosystem of scientific Python packages.</p>
    <p>At its core are functions for converting between ROOT <code>TTree</code>s and structured NumPy arrays. root_numpy can convert <code>TTree</code> branches (columns) of fundamental types and strings, as well as variable-length and fixed-length multidimensional arrays and (nested) <code>std::vector</code>s. root_numpy can also create columns in the output NumPy array from mathematical expressions like ROOT's <code>TTree::Draw()</code>. root_numpy's internals are written in Cython <span class="citation">(Behnel et al. 2011)</span>, installed as compiled C++ extensions, and can handle data with comparable speed to ROOT as shown in Figure . root_numpy can also convert between ROOT histograms and NumPy arrays, and sample or evaluate ROOT functions as NumPy arrays.</p>
    <p>root_numpy interfaces NumPy with TMVA <span class="citation">(Speckmayer et al. 2010)</span>, ROOT's machine learning toolkit, but naturally allows ROOT users to take advantage of scikit-learn <span class="citation">(Pedregosa et al. 2011)</span> and TensorFlow <span class="citation">(Abadi et al. 2015)</span>.</p>
    <div class="figure">
    <embed src="../benchmarks/bench_tree2array.pdf" />
    <p class="caption">Benchmarking root_numpy's <code>tree2array()</code> function against ROOT's <code>TTree::Draw()</code></p>
    </div>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-TensorFlow">
    <p>Abadi, Martín, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Greg S. Corrado, et al. 2015. “TensorFlow: Large-Scale Machine Learning on Heterogeneous Systems.” <a href="http://tensorflow.org/" class="uri">http://tensorflow.org/</a>.</p>
    </div>
    <div id="ref-ROOT">
    <p>Antcheva, Ilka, Maarten Ballintijn, Bertrand Bellenot, Marek Biskup, Rene Brun, Nenad Buncic, Philippe Canal, et al. 2009. “ROOT - a C++ Framework for Petabyte Data Storage, Statistical Analysis and Visualization.” <em>Computer Physics Communications</em> 180 (12): 2499–2512. doi:<a href="https://doi.org/10.1016/j.cpc.2009.08.005">10.1016/j.cpc.2009.08.005</a>.</p>
    </div>
    <div id="ref-Cython">
    <p>Behnel, Stefan, Robert Bradshaw, Craig Citro, Lisandro Dalcin, Dag Sverre Seljebotn, and Kurt Smith. 2011. “Cython: The Best of Both Worlds.” <em>Computing in Science and Engineering</em> 13: 31–39. doi:<a href="https://doi.org/10.1109/MCSE.2010.118">10.1109/MCSE.2010.118</a>.</p>
    </div>
    <div id="ref-scikit-learn">
    <p>Pedregosa, Fabian, Gaël Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, et al. 2011. “Scikit-Learn: Machine Learning in Python.” <em>Journal of Machine Learning Research</em> 12: 2825–30. <a href="http://scikit-learn.org" class="uri">http://scikit-learn.org</a>.</p>
    </div>
    <div id="ref-TMVA">
    <p>Speckmayer, P., A. Hocker, J. Stelzer, and H. Voss. 2010. “The Toolkit for Multivariate Data Analysis, Tmva 4.” <em>J. Phys. Conf. Ser.</em> 219: 032057. doi:<a href="https://doi.org/10.1088/1742-6596/219/3/032057">10.1088/1742-6596/219/3/032057</a>.</p>
    </div>
    <div id="ref-NumPy">
    <p>Walt, Stéfan van der, S. Chris Colbert, and Gaël Varoquaux. 2011. “The Numpy Array: A Structure for Efficient Numerical Computation.” <em>Computing in Science &amp; Engineering</em> 13: 22–30. doi:<a href="https://doi.org/10.1109/MCSE.2011.37">10.1109/MCSE.2011.37</a>.</p>
    </div>
    </div>
  </body>
</article>
