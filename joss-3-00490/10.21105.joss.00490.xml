<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>pyodesys: Straightforward numerical integration of ODE systems from Python</title>
    <authors>
      <author>
        <name>Björn Dahlgren</name>
        <orcid>0000-0003-0596-0222</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>ordinary differential equations</tag>
      <tag>symbolic derivation</tag>
      <tag>symbolic transformations</tag>
      <tag>code-generation</tag>
    </tags>
    <date>5 December 2017</date>
    <paper_doi>10.21105/joss.00490</paper_doi>
    <software_repository>https://github.com/bjodah/pyodesys</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1134944</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00490/10.21105.joss.00490.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>The numerical integration of systems of ordinary differential equations (ODEs) is very common in most scientific fields. There exists a large number of software libraries for solving these systems, each requiring the user to write their code in slightly different forms. Furthermore, it is sometimes necessary to perform variable transformations in order for the solution to proceed efficiently.</p>
    <p><em>pyodesys</em> provides a unified interface to some existing solvers. It also provides an interface to represent the system symbolically. This allows <em>pyodesys</em> to derive the Jacobian matrix symbolically (which is both tedious and error prone when done manually). In addition, this representation allows the user to manipulate the mathematical representation symbolically. This is achieved by using SymPy <span class="citation" data-cites="Meurer2017">(Meurer et al. 2017)</span> (although the coupling is loose and other symbolic backends may be used).</p>
    <p><em>pyodesys</em> enables the user to write his or her code once, and leave the library specific adaptions for <em>pyodesys</em> to handle. This allows the user to evaluate both different solvers (which implement different integration methods and algorithms for step size control) and alternative formulations of the system (from variable transformations, including scaling of variables).</p>
    <h1 id="features">Features</h1>
    <ul>
    <li>Unified interface to ODE solvers from Sundials <span class="citation" data-cites="hindmarsh2005sundials">(Hindmarsh et al. 2005)</span>, GNU Scientific Library <span class="citation" data-cites="galassi_gnu_2009">(Galassi 2009)</span> and odeint <span class="citation" data-cites="Ahnert2011">(Ahnert et al. 2011)</span> in boost.</li>
    <li>Convenince methods for working with solutions (plotting trajectories, interpolation, inspecting invariants).</li>
    <li>Automatic derivation of the Jacobian matrix for use with implicit steppers.</li>
    <li>Symbolic variable transformations in the system of ODEs.</li>
    <li>Symbolic reduction of degrees of freedom by variable elimination using linear invariants.</li>
    <li>Symbolic rewriting of system based on (possibly approximate) analytic solutions to a subset of the dependent variables.</li>
    <li>Code-generation (C++) and on-the-fly compilation for enhanced performance (including automatic common subexpression elimintation).</li>
    <li>Parallel execution for parameter variations (multithreading using OpenMP). This feature is only availble in conjuction with code-generation.</li>
    </ul>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Ahnert2011">
    <p>Ahnert, Karsten, Mario Mulansky, Theodore E. Simos, George Psihoyios, Ch. Tsitouras, and Zacharias Anastassi. 2011. “Odeint - Solving Ordinary Differential Equations in C++.” In. AIP. <a href="https://doi.org/10.1063/1.3637934" class="uri">https://doi.org/10.1063/1.3637934</a>.</p>
    </div>
    <div id="ref-galassi_gnu_2009">
    <p>Galassi, Mark, ed. 2009. <em>GNU Scientific Library: Reference Manual</em>. 3. ed., for GSL version 1.12, 1. print. A GNU Manual. s.l.: Network Theory.</p>
    </div>
    <div id="ref-hindmarsh2005sundials">
    <p>Hindmarsh, Alan C, Peter N Brown, Keith E Grant, Steven L Lee, Radu Serban, Dan E Shumaker, and Carol S Woodward. 2005. “SUNDIALS: Suite of Nonlinear and Differential/Algebraic Equation Solvers.” <em>ACM Transactions on Mathematical Software (TOMS)</em> 31 (3). ACM:363–96.</p>
    </div>
    <div id="ref-Meurer2017">
    <p>Meurer, Aaron, Christopher P. Smith, Mateusz Paprocki, Ondřej Čertík, Sergey B. Kirpichev, Matthew Rocklin, AMiT Kumar, et al. 2017. “SymPy: Symbolic Computing in Python.” <em>PeerJ Computer Science</em> 3 (January). PeerJ:e103. <a href="https://doi.org/10.7717/peerj-cs.103" class="uri">https://doi.org/10.7717/peerj-cs.103</a>.</p>
    </div>
    </div>
  </body>
</article>
