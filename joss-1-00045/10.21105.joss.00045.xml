<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>ChainConsumer</title>
    <authors>
      <author>
        <name>Samuel Hinton</name>
        <orcid>0000-0003-2071-9349</orcid>
        <affiliation>
          <orgname>
            University of Queensland
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>Python</tag>
      <tag>visualization</tag>
      <tag>mcmc</tag>
    </tags>
    <date>27 July 2016</date>
    <paper_doi>10.21105/joss.00045</paper_doi>
    <software_repository>https://github.com/samreay/ChainConsumer</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.61064</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00045/10.21105.joss.00045.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>ChainConsumer is a python package written to consume the output chains of Monte-Carlo processes and fitting algorithms, such as the results of MCMC.</p>
    <p>ChainConsumer's main function is to produce plots of the likelihood surface inferred from the supplied chain. In addition to showing the two-dimensional marginalised likelihood surfaces, marginalised parameter distributions are given, and maximum-likelihood statistics are used to present parameter constraints.</p>
    <p>In addition to this, parameter constraints can be output in the form of a LaTeX table. Finally, ChainConsumer also provides the functionality to plot the chains as a series of walks in parameter values, which provides an easy visual check on chain mixing and chain convergence.</p>
    <p>Plotting is performed via the matplotlib library <span class="citation">(Hunter 2007)</span>, and makes use of various numpy <span class="citation">(Walt, Colbert, and Varoquaux 2011)</span> and scipy <span class="citation">(Jones et al. 2001)</span> functions. The optional KDE feature makes use of <span class="citation">(StatsModels Team 2016)</span>.</p>
    <p>Code archives can be found on Zenodo at <span class="citation">(Zenodo Archive 2016)</span> and any bugs or feature requests can be opened as issues on the Github development page <span class="citation">(Hinton 2016)</span>.</p>
    <p>-<img src="example.png" alt="Likelihood surfaces and marginalised distributions created by ChainConsumer." /></p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-github">
    <p>Hinton, Samuel. 2016. “ChainConsumer.” <a href="https://github.com/samreay/ChainConsumer" class="uri">https://github.com/samreay/ChainConsumer</a>.</p>
    </div>
    <div id="ref-matplotlib">
    <p>Hunter, John D. 2007. “Matplotlib: A 2D Graphics Environment.” <em>Computing in Science and Engineering</em> 9 (3): 90–95. doi:<a href="https://doi.org/10.1109/MCSE.2007.55">10.1109/MCSE.2007.55</a>.</p>
    </div>
    <div id="ref-scipy">
    <p>Jones, Eric, Travis Oliphant, Pearu Peterson, and others. 2001. “SciPy: Open Source Scientific Tools for Python.” <a href="http://www.scipy.org/" class="uri">http://www.scipy.org/</a>.</p>
    </div>
    <div id="ref-statsmodels">
    <p>StatsModels Team. 2016. “StatsModels: Statistics in Python.” <em>GitHub Repository</em>. <a href="https://github.com/statsmodels/statsmodels" class="uri">https://github.com/statsmodels/statsmodels</a>; GitHub.</p>
    </div>
    <div id="ref-numpy">
    <p>Walt, Stefan van der, S. Chris Colbert, and Gael Varoquaux. 2011. “The NumPy Array: A Structure for Efficient Numerical Computation.” <em>Computing in Science and Engg.</em> 13 (2). Piscataway, NJ, USA: IEEE Educational Activities Department: 22–30. doi:<a href="https://doi.org/10.1109/MCSE.2011.37">10.1109/MCSE.2011.37</a>.</p>
    </div>
    <div id="ref-zenodo">
    <p>Zenodo Archive. 2016. “ChainConsumer.” <a href="http://dx.doi.org/10.5281/zenodo.60315" class="uri">http://dx.doi.org/10.5281/zenodo.60315</a>. doi:<a href="https://doi.org/10.5281/zenodo.58511">10.5281/zenodo.58511</a>.</p>
    </div>
    </div>
  </body>
</article>
