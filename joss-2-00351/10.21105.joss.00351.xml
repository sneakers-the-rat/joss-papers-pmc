<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>Nimbus: a Ruby gem to implement Random Forest algorithms in a genomic selection context</title>
    <authors>
      <author>
        <name>Juanjo Bazán</name>
        <orcid>0000-0001-7699-3983</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Oscar Gonzalez-Recio</name>
        <orcid>0000-0002-9106-4063</orcid>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>random forest</tag>
      <tag>genomics</tag>
      <tag>machine learning</tag>
      <tag>ruby</tag>
      <tag>open science</tag>
    </tags>
    <date>12 July 2017</date>
    <paper_doi>10.21105/joss.00351</paper_doi>
    <software_repository>https://github.com/xuanxu/nimbus</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.845342</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/raw/master/joss.00351/10.21105.joss.00351.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Nimbus is a Ruby gem implementing Random Forest in a genomic selection context, meaning every input file is expected to contain genotype and/or phenotype data from a sample of individuals. Other than the ids of the individuals, Nimbus handle the data as genotype values for single-nucleotide polymorphisms (SNPs), so the variables in the classifier must have values of 0, 1 or 2, corresponding with SNPs classes of AA, AB and BB.</p>
    <p>Nimbus provides a novel dataframe of random forest under ruby, and implements a modified algorithm that can separate all genotypes for a single marker, which can accommodate both additivity and dominance. Further, it allows the user to specify a loss function and provide full information of the trees in a .yml file.</p>
    <p>Nimbus can be used to:</p>
    <ul>
    <li><p>Create a random forest using a training sample of individuals with phenotype data.</p></li>
    <li><p>Use an existent random forest to get predictions for a testing sample.</p></li>
    </ul>
    <h3 id="random-forest">Random Forest</h3>
    <p>The random forest algorithm is a classifier consisting in many random decision trees, it was first proposed as a massively non-parametric machine-learning algorithm by Leo Breiman <span class="citation">(Breiman 2001)</span>. It is based on choosing random subsets of variables for each tree and using the most frequent, or the averaged tree output as the overall classification. Random forest makes use of bagging and randomization, constructing many decision trees <span class="citation">(Kamiński, Jakubczyk, and Szufel 2017)</span> on bootstrapped samples of a given data set. The prediction from the trees are averaged to make final predictions.</p>
    <p>In machine learning terms, it is an ensemble classifier, so it uses multiple models to obtain better predictive performance than could be obtained from any of the constituent models.</p>
    <p>The forest outputs the class that is the mean or the mode (in regression problems) or the majority class (in classification problems) of the node's output by individual trees.</p>
    <p>The algorithm is robust to over-fitting and able to capture complex interaction structures in the data, which may alleviate the problems of analyzing genome-wide data.</p>
    <h3 id="learning-algorithm">Learning algorithm</h3>
    <p><strong>Training</strong>: Each tree in the forest is constructed using the following algorithm:</p>
    <ul>
    <li><p>Let the number of training cases be N, and the number of variables (SNPs) in the classifier be M.</p></li>
    <li><p>The mtry number of input variables is told to the algorithm to be used in determining the decision at a node of the tree; m should be much less than M (usually 1/3), and the optimal value should be tuned for methods like grid search.</p></li>
    <li><p>Choose a training set for this tree by drawing n samples with replacement from all N available training cases (i.e. bootstrap sampling). The rest of the cases (Out Of Bag sample) will be used to estimate the error of the tree at predicting the classes of this out of Bag samples.</p></li>
    <li><p>For each node of the tree, randomly choose m SNPs on which to base the decision at that node. Calculate the best split based on these m SNPs in the training set.</p></li>
    <li><p>Each tree is fully grown and not pruned (as may be done in constructing a normal tree classifier).</p></li>
    <li><p>When in a node there is not any SNP split that minimizes the general loss function of the node, or the number of individuals in the node is less than the minimum node size then label the node with the average phenotype value of the individuals in the node.</p></li>
    </ul>
    <p><strong>Testing</strong>: An independent sample can be pushed down the tree to predict the most probable phenotype given the SNP genotypes. It is assigned the label of the training sample in the terminal node it ends up in. This procedure is iterated over all trees in the ensemble, and the average vote of all trees is reported as the random forest prediction.</p>
    <h3 id="nimbus">Nimbus</h3>
    <p>Nimbus trains the algorithm based on an input file (learning sample) containing the phenotypes of the individuals and their respective list of genotype markers (i.e. SNPs). A random forest is created and stored in a .yml file for future use.</p>
    <p>Nimbus can also be run to make prediction in a validation set or in a set of data containing yet to be observed response variable. In this case, the predictions can be obtained using the random forest created with a learning sample or using a previously stored random forest.</p>
    <p>If a learning sample is provided, the gem will create a file with the variable importance of each feature (marker) in the data. The higher the importance is, the more relevant the marker is to correctly predict the response variable in new data.</p>
    <p>Nimbus can be used for both classification or regression problems, and the user may provide different parameter values in a configuration file to tune the performance of the algorithm.</p>
    <p>-<img src="nimbus_outputs.png" alt="Output predictions" /></p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Breiman2001">
    <p>Breiman, Leo. 2001. “Random Forest.” <em>Machine Learning</em> 45 (1). Springer Nature: 5–32. doi:<a href="https://doi.org/10.1023/a:1010933404324">10.1023/a:1010933404324</a>.</p>
    </div>
    <div id="ref-Kamiski2017">
    <p>Kamiński, Bogumił, Michał Jakubczyk, and Przemysław Szufel. 2017. “A Framework for Sensitivity Analysis of Decision Trees.” <em>Central European Journal of Operations Research</em>, May. Springer Nature. doi:<a href="https://doi.org/10.1007/s10100-017-0479-6">10.1007/s10100-017-0479-6</a>.</p>
    </div>
    </div>
  </body>
</article>
