<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>PySwarms: a research toolkit for Particle Swarm Optimization in Python</title>
    <authors>
      <author>
        <name>Lester James V. Miranda</name>
        <orcid>0000-0002-7872-6464</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>particle swarm optimization</tag>
      <tag>swarm intelligence</tag>
      <tag>optimization algorithms</tag>
    </tags>
    <date>07 October 2017</date>
    <paper_doi>10.21105/joss.00433</paper_doi>
    <software_repository>https://github.com/ljvmiranda921/pyswarms</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1145432</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00433/10.21105.joss.00433.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Particle swarm optimization (PSO) is a heuristic search technique that iteratively improves a set of candidate solutions given an objective measure of fitness <span class="citation" data-cites="kennedyIJCNN1995">(Kennedy and Eberhart 1995b)</span>. Although vanilla implementations of PSO can be found in some Python evolutionary algorithm toolboxes <span class="citation" data-cites="deapJMLR2012 pagmo2017">(Fortin et al. 2012; Biscani, Izzo, and M√§rtens 2017)</span>, a PSO-specific library that focuses on the said technique is still an open challenge.</p>
    <p>PySwarms is a research toolkit for Particle Swarm Optimization (PSO) that provides a set of class primitives useful for solving continuous and combinatorial optimization problems. It follows a black-box approach, solving optimization tasks with few lines of code, yet allows a white-box framework with a consistent API for rapid prototyping of non-standard swarm models. In addition, benchmark objective functions and parameter-search tools are included to evaluate and improve swarm performance. It is intended for swarm intelligence researchers, practitioners, and students who would like a high-level declarative interface for implementing PSO in their problems.</p>
    <p>The main design principle of the package is to balance (1) ease-of-use by providing a rich set of classes to solve optimization tasks, and (2) ease-of-experimentation by defining a consistent API to accommodate non-standard PSO implementations. In this context, PySwarms follows these core principles in its development:</p>
    <ul>
    <li><strong>Maintain a specific set of conventions that are manageable to understand.</strong> This enables repeatability in all implementations and creates a single framework where the API will be based. Thus, for a particular swarm <span class="math inline">ùíÆ</span>, the particles are defined as an <span class="math inline"><em>m</em>‚ÄÖ√ó‚ÄÖ<em>n</em></span> matrix where <span class="math inline"><em>m</em></span> corresponds to the number of particles, and <span class="math inline"><em>n</em></span> to the number of dimensions in the search-space. Its fitness is then expressed as an <span class="math inline"><em>m</em></span>-dimensional array containing the value for each particle.</li>
    <li><strong>Define a consistent API for all swarm implementations.</strong> A consistent API accommodates rapid prototyping of non-standard PSO implementations. As long as the user implements according to the API, all PySwarms capabilities are made available. It consists of an <code>init</code> method to initialize the swarm, an <code>update_position</code> and <code>update_velocity</code> rule to define update behaviour, and an <code>optimize</code> method that contains the evolutionary loop.</li>
    <li><strong>Provide a set of primitive classes for off-the-shelf PSO implementations.</strong> To deliver easy-access of PSO implementations for common optimization tasks, wrapper classes for standard global-best and local-best PSO are included. These implementations follow the same PySwarms API, and can even be built upon for more advanced applications.</li>
    </ul>
    <p>Various features include:</p>
    <ul>
    <li><strong>Python implementation of standard PSO algorithms.</strong> Includes the classic global best and local best PSO <span class="citation" data-cites="kennedyIJCNN1995 kennedyMHS1995">(Kennedy and Eberhart 1995b, 1995a)</span>, and binary PSO for discrete optimization <span class="citation" data-cites="kennedySMC1997">(Kennedy and Eberhart 1997)</span>. These implementations are built natively in <code>numpy</code> <span class="citation" data-cites="numpycse scipyweb">(Walt, Colbert, and Varoquaux 2011; Jones et al. 2001‚Äì2001--)</span>.</li>
    <li><strong>Built-in single objective functions for testing.</strong> Provides an array of single-objective functions to test optimizers. Includes simple variants such as the sphere function, up to complicated ones such as Beale and Rastrigin functions.</li>
    <li><strong>Plotting environment for cost and swarm animation.</strong> A wrapper built on top of <code>matplotlib</code> <span class="citation" data-cites="matplotlibcse">(Hunter 2007)</span> to conveniently plot costs and animate swarms (both in 2D and 3D) to assess performance and behavior.</li>
    <li><strong>Hyperparameter search tools.</strong> Implements both random and grid search to find optimal hyperparameters for controlling swarm behavior.</li>
    <li><strong>Base classes for implementing your own optimizer.</strong> Provides single-objective base classes for researchers to rapidly prototype and implement their own optimizers.</li>
    </ul>
    <p>Example use-cases involve: optimization of continuous and discrete functions, neural network training, feature selection, forward kinematics, and the like. Some of these use-cases are explained, with accompanying code, in the <a href="https://pyswarms.readthedocs.io/en/latest/">Documentation</a>. This package is actively maintained and developed by the author with the help of various contributors.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-pagmo2017">
    <p>Biscani, Francesco, Dario Izzo, and Marcus M√§rtens. 2017. ‚ÄúEsa/Pagmo2: Pagmo 2.6.‚Äù <a href="https://doi.org/10.5281/zenodo.1054110" class="uri">https://doi.org/10.5281/zenodo.1054110</a>.</p>
    </div>
    <div id="ref-deapJMLR2012">
    <p>Fortin, F√©lix-Antoine, Fran√ßois-Michel De Rainville, Marc-Andr√© Gardner, Marc Parizeau, and Christian Gagn√©. 2012. ‚ÄúDEAP: Evolutionary Algorithms Made Easy.‚Äù <em>Journal of Machine Learning Research</em> 13 (July):2171‚Äì5.</p>
    </div>
    <div id="ref-matplotlibcse">
    <p>Hunter, J.D. 2007. ‚ÄúMatplotlib: A 2D Graphics Environment.‚Äù <em>Computing in Science &amp; Engineering</em> 9 (3):90‚Äì95. <a href="https://doi.org/10.1109/MCSE.2007.55" class="uri">https://doi.org/10.1109/MCSE.2007.55</a>.</p>
    </div>
    <div id="ref-scipyweb">
    <p>Jones, Eric, Travis Oliphant, Pearu Peterson, and others. 2001‚Äì2001--. ‚ÄúSciPy: Open Source Scientific Tools for Python.‚Äù <a href="http://www.scipy.org/" class="uri">http://www.scipy.org/</a>.</p>
    </div>
    <div id="ref-kennedyMHS1995">
    <p>Kennedy, James, and Russell Eberhart. 1995a. ‚ÄúA New Optimizer for Particle Swarm Theory.‚Äù In <em>Proceedings of the Sixth International Symposium on Micromachine and Human Science</em>.</p>
    </div>
    <div id="ref-kennedyIJCNN1995">
    <p>‚Äî‚Äî‚Äî. 1995b. ‚ÄúParticle Swarm Optimization.‚Äù In <em>Proceedings of the Ieee International Joint Conference on Neural Networks</em>.</p>
    </div>
    <div id="ref-kennedySMC1997">
    <p>‚Äî‚Äî‚Äî. 1997. ‚ÄúA Discrete Binary Particle Swarm Optimization Algorithm.‚Äù In <em>Proceedings of the Ieee International Conference on Systems, Man, and Cybernetics</em>.</p>
    </div>
    <div id="ref-numpycse">
    <p>Walt, Stefan van der, S. Chris Colbert, and Gael Varoquaux. 2011. ‚ÄúThe Numpy Array: A Structure for Efficient Numerical Computation.‚Äù <em>Computing in Science &amp; Engineering</em> 13 (2):22‚Äì30. <a href="https://doi.org/10.1109/MCSE.2011.37" class="uri">https://doi.org/10.1109/MCSE.2011.37</a>.</p>
    </div>
    </div>
  </body>
</article>
