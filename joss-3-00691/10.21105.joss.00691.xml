<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>ParticleScattering: Solving and optimizing multiple-scattering problems in Julia</title>
    <authors>
      <author>
        <name>Boaz Blankrot</name>
        <orcid>0000-0003-3364-9298</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Clemens Heitzinger</name>
        <orcid>0000-0003-1613-5164</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>Computational electromagnetics</tag>
      <tag>Scattering</tag>
      <tag>Julia</tag>
    </tags>
    <date>8 April 2018</date>
    <paper_doi>10.21105/joss.00691</paper_doi>
    <software_repository>https://github.com/bblankrot/ParticleScattering.jl</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1241368</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00691/10.21105.joss.00691.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p><a href="https://github.com/bblankrot/ParticleScattering.jl">ParticleScattering</a> is a Julia <span class="citation" data-cites="ar:julia2017">(Bezanson et al. 2017)</span> package for computing the electromagnetic fields scattered by a large number of two-dimensional particles, as well as optimizing particle parameters for various applications. Such problems naturally arise in the design and analysis of metamaterials, including photonic crystals <span class="citation" data-cites="ar:alldielectric">(Jahani and Jacob 2016)</span>. Unlike most solvers for these problems, ours does not require a periodic structure and is scalable to a large number of particles. In particular, this software is designed for scattering problems involving TM plane waves impinging on a collection of homogeneous dielectric particles with arbitrary smooth shapes. Our code performs especially well when the number of particles is substantially larger than the number of distinct shapes, where particles are considered indistinct if they are identical up to rotation.</p>
    <h2 id="solver-overview">Solver overview</h2>
    <p>Given a scattering problem consisting of a collection of penetrable particles in a homogeneous medium, the software performs the following steps to calculate the total electric field:</p>
    <ul>
    <li>For each distinct non-circular shape, a single- and double-layer potential formulation is constructed.</li>
    <li>The potential formulations are transformed to a multipole basis of Hankel functions, reducing the degrees of freedom by at least an order of magnitude.</li>
    <li>Analytical multipole basis is computed for circular particles.</li>
    <li>A multiple-scattering system of equations is constructed, and then solved with the Fast Multipole Method.</li>
    <li>Electric field is computed at any point of interest.</li>
    </ul>
    <p>In addition, ParticleScattering can plot near- and far-field results using the popular framework <a href="https://github.com/JuliaPy/PyPlot.jl">PyPlot</a>, create publication-level plots with <a href="https://github.com/KristofferC/PGFPlotsX.jl">PGFPlots</a> integration, and compute minimum parameters for a desired error level.</p>
    <h2 id="optimization">Optimization</h2>
    <p>ParticleScattering is especially targeted at users who wish to design metamaterials belonging to the class described above. While the large number of variables such metamaterials contain allows for a variety of devices that meet different objectives, it also creates a large search space for choosing them. Therefore, a fast and automated approach can be beneficial for both inventing new designs and improving existing ones. As the results of many ParticleScattering computations can be recycled between optimization iterations, a large number of parameters can be optimized simultaneously in reasonable time. ParticleScattering performs gradient-based optimization of rotation angle for arbitrarily-shaped particles, and radius of circular particles, in conjunction with the Optim optimization package <span class="citation" data-cites="ar:optimjl">(Mogensen and Riseth 2018)</span>, where the objective is to minimize or maximize the electric field intensity at chosen points. Figure 1 shows an example of angle optimization of 20 particles, where the objective is the electric field intensity at the origin. From left to right, we see the electric field before optimization, after minimization, and after maximization. The field intensity at the origin is clearly different in both optimization results, with minimization decreasing the intensity by 95%, and maximization increasing it by over 700%. The total run time for both optimizations and all necessary precomputations was 35 seconds.</p>
    <figure>
    <img src="fig.png" alt="Scattering problem before optimization, after minimization, and after maximization." /><figcaption>Scattering problem before optimization, after minimization, and after maximization.</figcaption>
    </figure>
    <p>For a detailed description of our approach, including several numerical examples generated by ParticleScattering, see our recent publication <span class="citation" data-cites="ar:blankrot2018">(Blankrot and Heitzinger 2018)</span>.</p>
    <h1 id="acknowledgments">Acknowledgments</h1>
    <p>This work was supported by the Austrian Science Fund (FWF) through the START Project Y 660 <em>PDE Models for Nanotechnology</em>.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-ar:julia2017">
    <p>Bezanson, Jeff, Alan Edelman, Stefan Karpinski, and Viral B Shah. 2017. “Julia: A Fresh Approach to Numerical Computing.” <em>SIAM Review</em> 59 (1). SIAM:65–98. <a href="https://doi.org/10.1137/141000671" class="uri">https://doi.org/10.1137/141000671</a>.</p>
    </div>
    <div id="ref-ar:blankrot2018">
    <p>Blankrot, Boaz, and Clemens Heitzinger. 2018. “Efficient Computational Design and Optimization of Dielectric Metamaterial Devices.” <a href="https://arxiv.org/abs/1804.09489" class="uri">https://arxiv.org/abs/1804.09489</a>.</p>
    </div>
    <div id="ref-ar:alldielectric">
    <p>Jahani, Saman, and Zubin Jacob. 2016. “All-Dielectric Metamaterials.” <em>Nature Nanotechnology</em> 11 (1). Nature Research:23–36. <a href="https://doi.org/10.1038/nnano.2015.304" class="uri">https://doi.org/10.1038/nnano.2015.304</a>.</p>
    </div>
    <div id="ref-ar:optimjl">
    <p>Mogensen, Patrick K, and Asbjørn N Riseth. 2018. “Optim: A Mathematical Optimization Package for Julia.” <em>Journal of Open Source Software</em> 3 (24). The Open Journal:615. <a href="https://doi.org/10.21105/joss.00615" class="uri">https://doi.org/10.21105/joss.00615</a>.</p>
    </div>
    </div>
  </body>
</article>
