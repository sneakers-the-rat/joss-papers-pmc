<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>pygtc: beautiful parameter covariance plots (aka. Giant Triangle Confusograms)</title>
    <authors>
      <author>
        <name>Sebastian Bocquet</name>
        <orcid>0000-0002-4900-805X</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Faustin W. Carter</name>
        <orcid>0000-0002-1236-3517</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>Python</tag>
      <tag>data analysis</tag>
      <tag>visualization</tag>
    </tags>
    <date>27 July 2016</date>
    <paper_doi>10.21105/joss.00046</paper_doi>
    <software_repository>https://github.com/SebastianBocquet/pygtc</software_repository>
    <software_archive>https://dx.doi.org/10.5281/zenodo.159225</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00046/10.21105.joss.00046.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Multi-dimensional model parameter spaces are commonly sampled using Markov Chain Monte-Carlo (MCMC) methods or more advanced algorithms as implemented, for instance, in <code>emcee</code> <span class="citation">(Foreman-Mackey et al. 2013)</span> or <code>PyMultiNest</code> <span class="citation">(Buchner et al. 2014)</span>. The recovered parameter constraints are usually displayed on a grid in which the diagonal shows the 1-dimensional posteriors and the lower-left half shows the pairwise projections. Due to the triangular appearance, such plots are typically referred to as &quot;triangle&quot; plots. If the parameter space is large, the resulting plot can be visually overwhelming; we refer to such a figure as a Giant Triangle Confusogram (GTC).</p>
    <p>Several packages exist to produce these plots and range in functionality from the lightweight <code>corner</code> <span class="citation">(Foreman-Mackey 2016)</span>, to the feature-heavy <code>getdist</code> <span class="citation">(Lewis 2015)</span>, which allows arbitrary large data sets and contains nearly every conceivable option and customization (at the expense of a steep learning curve). <code>pygtc</code> aims to fill the parameter space in between by producing beautiful publication-ready figures with as little as a single line of code, while allowing for an arbitrary number of sets of likelihood surfaces (a crucial feature in our field of cosmology). Various user-friendly options allow for further adjustments and ensure that details such as font sizes are chosen to match the layout of several astrophysical journals.</p>
    <p>Figure 1 shows an example figure (comparing three sets of data from different analyses) that was produced with the <code>pygtc</code> package and formatted for the Astrophysical Journal, all with the following line of code:</p>
    <div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python">GTC <span class="op">=</span> pygtc.plotGTC(chains<span class="op">=</span>[dat1,dat2,dat3],
                        chainLabels<span class="op">=</span>[<span class="st">&quot;data1&quot;</span>, <span class="st">&quot;data2&quot;</span>, <span class="st">&quot;data3&quot;</span>],
                        paramNames<span class="op">=</span>[<span class="st">&#39;foo&#39;</span>, <span class="st">&#39;bar&#39;</span>, <span class="st">&#39;$C$&#39;</span>, <span class="st">&#39;$</span><span class="ch">\\</span><span class="st">nu$&#39;</span>],
                        truths<span class="op">=</span>(<span class="va">None</span>, <span class="dv">1</span>, <span class="va">None</span>, <span class="dv">0</span>),
                        truthLabels<span class="op">=</span><span class="st">&#39;ref&#39;</span>,
                        figureSize<span class="op">=</span><span class="st">&#39;APJ_page&#39;</span>)</code></pre></div>
    <div class="figure">
    <img src="GTC.png" alt="A GTC produced by pygtc." />
    <p class="caption">A GTC produced by <em>pygtc</em>.</p>
    </div>
    <p><code>pygtc</code> relies on <code>numpy</code> <span class="citation">(Walt, Colbert, and Varoquaux 2011)</span>, <code>matplotlib</code> <span class="citation">(Hunter 2007)</span>, and <code>scipy</code> <span class="citation">(Jones et al. 2001–2001--)</span> (optional) to produce aesthetically appealing GTCs, and is designed to accept the standard output of the <code>emcee</code> package or any other likelihood sampler that returns a list of (weighted or unit-weighted) sample points. The source code for the latest release of <code>pygtc</code> is available at Zenodo <span class="citation">(Bocquet and Carter 2016b)</span> and development is ongoing at GitHub <span class="citation">(Bocquet and Carter 2016a)</span>.</p>
    <h1 id="acknowledgements">Acknowledgements</h1>
    <p>Work at Argonne National Laboratory was supported under the U.S. Department of Energy contract DE-AC02-06CH11357.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-pygtc">
    <p>Bocquet, Sebastian, and Faustin W. Carter. 2016a. “Pygtc GitHub Repository.” <a href="https://github.com/SebastianBocquet/pygtc" class="uri">https://github.com/SebastianBocquet/pygtc</a>.</p>
    </div>
    <div id="ref-pygtc_zenodo">
    <p>———. 2016b. “Pygtc Zenodo Archive.” doi:<a href="https://doi.org/10.5281/zenodo.159091">10.5281/zenodo.159091</a>.</p>
    </div>
    <div id="ref-pymultinest">
    <p>Buchner, J., A. Georgakakis, K. Nandra, L. Hsu, C. Rangel, M. Brightman, A. Merloni, M. Salvato, J. Donley, and D. Kocevski. 2014. “X-ray spectral modelling of the AGN obscuring region in the CDFS: Bayesian model selection and catalogue” 564 (April): A125. doi:<a href="https://doi.org/10.1051/0004-6361/201322971">10.1051/0004-6361/201322971</a>.</p>
    </div>
    <div id="ref-corner">
    <p>Foreman-Mackey, Daniel. 2016. “Corner.py: Scatterplot Matrices in Python.” <em>The Journal of Open Source Software</em> 24. doi:<a href="https://doi.org/10.21105/joss.00024">10.21105/joss.00024</a>.</p>
    </div>
    <div id="ref-emcee">
    <p>Foreman-Mackey, Daniel, David W. Hogg, Dustin Lang, and Jonathan Goodman. 2013. “Emcee: The MCMC Hammer.” <em>Publications of the Astronomical Society of the Pacific</em> 125 (925): 306. <a href="http://stacks.iop.org/1538-3873/125/i=925/a=306" class="uri">http://stacks.iop.org/1538-3873/125/i=925/a=306</a>.</p>
    </div>
    <div id="ref-matplotlib">
    <p>Hunter, J. D. 2007. “Matplotlib: A 2D Graphics Environment.” <em>Computing In Science &amp; Engineering</em> 9 (3). IEEE COMPUTER SOC: 90–95. doi:<a href="https://doi.org/10.1109/MCSE.2007.55">10.1109/MCSE.2007.55</a>.</p>
    </div>
    <div id="ref-scipy">
    <p>Jones, Eric, Travis Oliphant, Pearu Peterson, and others. 2001–2001--. “SciPy: Open Source Scientific Tools for Python.” doi:<a href="https://doi.org/10.1109/MCSE.2011.37">10.1109/MCSE.2011.37</a>.</p>
    </div>
    <div id="ref-getdist">
    <p>Lewis, Antony. 2015. “Getdist GitHub Repository.” <a href="https://github.com/cmbant/getdist" class="uri">https://github.com/cmbant/getdist</a>.</p>
    </div>
    <div id="ref-numpy">
    <p>Walt, Stéfan van der, S. Chris Colbert, and Gaël Varoquaux. 2011. “The NumPy Array: A Structure for Efficient Numerical Computation.” <em>Computing in Science &amp; Engineering</em> 13 (2): 22–30. doi:<a href="https://doi.org/http://dx.doi.org/10.1109/MCSE.2011.37">http://dx.doi.org/10.1109/MCSE.2011.37</a>.</p>
    </div>
    </div>
  </body>
</article>
