<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>Optlang: An algebraic modeling language for mathematical optimization</title>
    <authors>
      <author>
        <name>Kristian Jensen</name>
        <orcid>0000-0002-2796-805X</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Joao G.R. Cardoso</name>
        <orcid>0000-0001-8173-2673</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Nikolaus Sonnenschein</name>
        <orcid>0000-0002-7581-4936</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>Mathematical optimization</tag>
      <tag>Linear programming</tag>
      <tag>Object-oriented API</tag>
    </tags>
    <date>6 December 2016</date>
    <paper_doi>10.21105/joss.00139</paper_doi>
    <software_repository>https://github.com/biosustain/optlang</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.228165</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00139/10.21105.joss.00139.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Optlang is a Python package implementing a modeling language for solving mathematical optimization problems, i.e., maximizing or minimizing an objective function over a set of variables subject to a number of constraints. It provides a common native Python interface to a series of optimization tools, so different solver backends can be used and changed in a transparent way.</p>
    <p>Optlang's object-oriented API takes advantage of the symbolic math library SymPy <span class="citation">(Team 2016)</span> to allow objective functions and constraints to be easily formulated algebraically from symbolic expressions of variables. Optlang targets scientists who can thus focus on formulating optimization problems based on mathematical equations derived from domain knowledge.</p>
    <p>Solver interfaces can be added by subclassing the four main classes of the optlang API (Variable, Constraint, Objective, and Model) and implementing the relevant API functions.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Sympy">
    <p>Team, SymPy Development. 2016. “SymPy: Python Library for Symbolic Mathematics.” doi:<a href="https://doi.org/10.5281/zenodo.47274">10.5281/zenodo.47274</a>.</p>
    </div>
    </div>
  </body>
</article>
