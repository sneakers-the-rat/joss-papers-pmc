<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>ChemPy: A package useful for chemistry written in Python</title>
    <authors>
      <author>
        <name>Björn Dahlgren</name>
        <orcid>0000-0003-0596-0222</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>chemistry</tag>
      <tag>physical chemistry</tag>
    </tags>
    <date>26 January 2018</date>
    <paper_doi>10.21105/joss.00565</paper_doi>
    <software_repository>https://github.com/bjodah/chempy</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1212469</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00565/10.21105.joss.00565.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>ChemPy is a Python library that provides functions and classes for solving chemistry related problems. It includes classes for representing substances, reactions, and systems of reactions. It also includes well established formulae from physical chemistry, as well as analytic solutions to some differential equations commonly encountered in chemical kinetics. Last, but not the least, it collects parametrizations of chemical properties of substances from the literature.</p>
    <p>Its intended audience is primarily researchers and engineers who need to perform modelling work. But since the intermediate representations of, e.g., ODE systems and systems of non-linear equations are available symbolically, ChemPy may also be used in an educational setting.</p>
    <p>Substances are represented by a class that holds their names and, optionally, information on their composition, weight, charge etc., as well as how to pretty print them using LaTeX, HTML and unicode. Both the composition and stylistic representations can be deduced by ChemPy’s parser. Reactions are represented through their stoichiometry and thermodynamic/kinetic parameters. If the stoichiometry of a reaction is unknown, ChemPy can balance it based on the composition of the substances. The classes for representing systems of reactions provide methods to analyze, e.g., if there are disjoint sets of reactions, or if all are connected in the same network. The classes also offer a series of checks performed at initialization, ensuring balanced reactions with sane coefficients and consistent units.</p>
    <p>Systems of reactions can be represented as graphs, tables, systems of ordinary differential equations (chemical kinetics) or non-linear equations (chemical equilibria). The latter two forms can be solved numerically using pyodesys <span class="citation" data-cites="dahlgren_pyodesys_2018">(Dahlgren 2018b)</span> and pyneqsys <span class="citation" data-cites="dahlgren_pyneqsys_2018">(Dahlgren 2018a)</span> respectively.</p>
    <p>Thanks to the use of SymPy <span class="citation" data-cites="Meurer2017">(Meurer et al. 2017)</span>, stoichiometry problems with a single unique solution can be solved analytically, as well as under-determined systems, where the answer then contains a free parameter. The under-determined formulation can also be expressed in a canoncial form with coefficients minimzed using PuLP <span class="citation" data-cites="mitchell2011pulp lougee2003common">(Mitchell, OSullivan, and Dunning 2011; Lougee-Heimer 2003)</span>. In fact, most equations and parametrizations in ChemPy support—in addition to NumPy arrays <span class="citation" data-cites="vanderWalt2011">(Walt, Colbert, and Varoquaux 2011)</span>—also symbolic input, as well as arrays with explicit units. The latter allows ChemPy to check that, e.g., the correct dimensionality with respect to reaction order is used for rate constants.</p>
    <h1 id="features">Features</h1>
    <ul>
    <li>Pretty printing of chemical formulae and reaction sets.</li>
    <li>Interactive JavaScript enabled widgets in the Jupyter notebook <span class="citation" data-cites="Kluyver2016">(Thomas et al. 2016)</span>.</li>
    <li>Parsing of chemical formulae, reactions and systems thereof.</li>
    <li>Functions for expressing systems of reactions as ordinary differential equations.</li>
    <li>Functions for expressing systems of equilibria as non-linear equations (including multi-phase systems).</li>
    <li>Analytic solutions for a selection of kinetic problems.</li>
    </ul>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-dahlgren_pyneqsys_2018">
    <p>Dahlgren, Björn. 2018a. “Pyneqsys: Solve Symbolically Defined Systems of Non-Linear Equations Numerically.” <em>The Journal of Open Source Software</em> 3 (21). The Open Journal:531. <a href="https://doi.org/10.21105/joss.00531" class="uri">https://doi.org/10.21105/joss.00531</a>.</p>
    </div>
    <div id="ref-dahlgren_pyodesys_2018">
    <p>———. 2018b. “Pyodesys: Straightforward Numerical Integration of ODE Systems from Python.” <em>The Journal of Open Source Software</em> 3 (21). The Open Journal:490. <a href="https://doi.org/10.21105/joss.00490" class="uri">https://doi.org/10.21105/joss.00490</a>.</p>
    </div>
    <div id="ref-lougee2003common">
    <p>Lougee-Heimer, Robin. 2003. “The Common Optimization Interface for Operations Research: Promoting Open-Source Software in the Operations Research Community.” <em>IBM Journal of Research and Development</em> 47 (1). IBM:57–66.</p>
    </div>
    <div id="ref-Meurer2017">
    <p>Meurer, Aaron, Christopher P. Smith, Mateusz Paprocki, Ondřej Čertík, Sergey B. Kirpichev, Matthew Rocklin, AMiT Kumar, et al. 2017. “SymPy: Symbolic Computing in Python.” <em>PeerJ Computer Science</em> 3 (January). PeerJ:e103. <a href="https://doi.org/10.7717/peerj-cs.103" class="uri">https://doi.org/10.7717/peerj-cs.103</a>.</p>
    </div>
    <div id="ref-mitchell2011pulp">
    <p>Mitchell, Stuart, Michael OSullivan, and Iain Dunning. 2011. “PuLP: A Linear Programming Toolkit for Python. The University of Auckland, Auckland, New Zealand.” <a href="http://www.optimization-online.org/DB_FILE/2011/09/3178.pdf" class="uri">http://www.optimization-online.org/DB_FILE/2011/09/3178.pdf</a>.</p>
    </div>
    <div id="ref-Kluyver2016">
    <p>Thomas, Kluyver, Ragan-Kelley Benjamin, Pérez Fernando, Granger Brian, Bussonnier Matthias, Frederic Jonathan, Kelley Kyle, Hamrick Jessica, Grout Jason, and et al. Corlay Sylvain. 2016. “Jupyter Notebooks—a Publishing Format for Reproducible Computational Workflows.” IOS Press, 87–90. <a href="https://doi.org/10.3233/978-1-61499-649-1-87" class="uri">https://doi.org/10.3233/978-1-61499-649-1-87</a>.</p>
    </div>
    <div id="ref-vanderWalt2011">
    <p>Walt, Stéfan van der, S Chris Colbert, and Gaël Varoquaux. 2011. “The NumPy Array: A Structure for Efficient Numerical Computation.” <em>Computing in Science &amp; Engineering</em> 13 (2). Institute of Electrical; Electronics Engineers (IEEE):22–30. <a href="https://doi.org/10.1109/mcse.2011.37" class="uri">https://doi.org/10.1109/mcse.2011.37</a>.</p>
    </div>
    </div>
  </body>
</article>
