<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>VCFPy: a Python 3 library with good support for both reading and writing VCF</title>
    <authors>
      <author>
        <name>Manuel Holtgrewe</name>
        <orcid>0000-0002-3051-1763</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Dieter Beule</name>
        <orcid>0000-0002-3284-0632</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>VCF</tag>
      <tag>Python</tag>
      <tag>software library</tag>
    </tags>
    <date>28 September 2016</date>
    <paper_doi>10.21105/joss.00085</paper_doi>
    <software_repository>https://github.com/bihealth/vcfpy</software_repository>
    <software_archive>https://dx.doi.org/10.6084/m9.figshare.3863583.v2</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00085/10.21105.joss.00085.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>VCF file format <span class="citation">(Danecek et al. 2011)</span> is the standard file format for genetic variants, both small and structural variants. It has broad adaption in the Bioinformatics community and is used both by most projects, software, and databases these days.</p>
    <p>There is a number of Python libraries for processing VCF, but most focus on reading VCF and not allowing for easily creating or augmenting VCF headers and records. For example, the most popular library PyVCF does not allow for built-in modification of the per-sample <code>FORMAT/*</code> records. PySAM (the wrapper for htslib) does only have very limited support for modifyin VCF records at all.</p>
    <p>VCFPy addresses these issues and provides a well-documented, easy to use, and pythonic interface to reading and writing VCF files. It supports VCF v4.3, reading and writing of both plain-text and bgzip-compressed VCF files, as well as Tabix indices. Further, the project is well-documented and uses automatic testing as well as static code analysis for enforcing software quality standards.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Danecek2011">
    <p>Danecek, Petr, Adam Auton, Goncalo Abecasis, Cornelis A Albers, Eric Banks, Mark A DePristo, Robert E Handsaker, et al. 2011. “The Variant Call Format and VCFtools.” <em>Bioinformatics</em> 27 (15). Oxford Univ Press: 2156–8.</p>
    </div>
    </div>
  </body>
</article>
