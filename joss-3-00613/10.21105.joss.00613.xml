<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>NiaPy: Python microframework for building nature-inspired algorithms</title>
    <authors>
      <author>
        <name>Grega Vrbančič</name>
        <orcid>0000-0003-0723-3889</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Lucija Brezočnik</name>
        <orcid>0000-0002-3622-428X</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Uroš Mlakar</name>
        <orcid>0000-0002-4278-6078</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Dušan Fister</name>
        <orcid>0000-0002-9604-0554</orcid>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Iztok Fister Jr.</name>
        <orcid>0000-0002-6418-1272</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>nature-inspired algorithms</tag>
      <tag>microframework</tag>
    </tags>
    <date>27 February 2018</date>
    <paper_doi>10.21105/joss.00613</paper_doi>
    <software_repository>https://github.com/NiaOrg/NiaPy</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1205048</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00613/10.21105.joss.00613.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Nature-inspired algorithms are a very popular tool for solving optimization problems <span class="citation" data-cites="Yang2014">(Yang 2014)</span>, <span class="citation" data-cites="Hassanien2016">(Hassanien and Emary 2016)</span>. Numerous variants of nature-inspired algorithms have been developed <span class="citation" data-cites="Fister2013">(Iztok Fister Jr. and Fister 2013)</span> since the beginning of their era. To prove their versatility, those were tested in various domains on various applications, especially when they are hybridized, modified or adapted. However, implementation of nature-inspired algorithms is sometimes a difficult, complex and tedious task. In order to break this wall, <code>NiaPy</code> is intended for simple and quick use, without spending time for implementing algorithms from scratch.</p>
    <p>Currently, the framework consists of algorithms, benchmark functions and supporting features. There are 8 basic implemented algorithms: Artificial Bee Colony algorithm, Bat algorithm, Differential Evolution algorithm, Firefly algorithm, Flower Pollination algorithm, Genetic algorithm, Grey Wolf Optimizer, Particle Swarm Optimization and 2 hybrid variants: Hybrid Bat algorithm, self-adaptive Differential Evolution algorithm. The following benchmark functions <span class="citation" data-cites="Jamil2013">(Jamil and Yang 2013)</span> are also included in framework: Ackley, Alpine, Alpine1, Alpine2, Chung Reynolds, Csendes, Griewank, Happy cat, Pintér, Qing, Quintic, Rastrigin, Ridge, Rosenbrock, Salomon, Schumer Steiglitz, Schwefel, Schwefel 2.21, Schwefel 2.22, Sphere, Step, Step2, Step3, Stepint, Styblinski-Tang, Sum Squares, Whitley. A supporting feature consists of a runner utility that allows users to run selected algorithms easily, along with predefined or customized benchmark functions. By the same token, it also allows export to various formats, such as, for example, LaTeX, JSON, and Excel.</p>
    <p>There are also some existing similar Python implementations/frameworks of nature-inspired algorithms, as for example DEAP <span class="citation" data-cites="Deap2012">(Félix-Antoine Fortin and Gagné 2012)</span>, EvoloPy <span class="citation" data-cites="Evolopy2016">(Hossam Faris and Merelo 2016)</span>, PySwarms <span class="citation" data-cites="Pyswarms2018">(Miranda 2018)</span>, inspyred <span class="citation" data-cites="Inspyred2014">(Garrett 2014)</span>, and Pygmo <span class="citation" data-cites="Pygmo2012">(Izzo 2012)</span>. However, NiaPy tends to be very minimalistic and easy for use, especially for practitioners and students.</p>
    <p>Key features of NiaPy:</p>
    <ul>
    <li>Since it is a very extensible framework, new algorithms can be integrated into it easily.</li>
    <li>Good documentation.</li>
    <li>Practitioner friendly. Users do not need to implement algorithms from scratch.</li>
    <li>Due to the many implemented algorithms, researchers can study how similar algorithms are (the problem of metaphor-based algorithms <span class="citation" data-cites="Sorensen2015">(Sörensen 2015)</span>).</li>
    <li>The framework allows a fair comparison. Only a number of function evaluations are taken as the stopping criterion.</li>
    <li>Reviewers can check for referential results quickly.</li>
    <li>Rapid prototyping of new approaches, especially modified algorithms.</li>
    <li>Supportive community.</li>
    </ul>
    <figure>
    <img src="NiaPyDiagram.png" alt="NiaPy architecture" /><figcaption>NiaPy architecture</figcaption>
    </figure>
    <p>In conclusion, NiaPy is a new microframework for building and using nature-inspired algorithms in Python. Stepping stones for the design and implementation of NiaPy were the limitations of existing software, that were mostly limited in documentation, number of algorithms, inconsistent stopping criteria, non-modular software architecture. In the future, more algorithms will be added to the current collection, while support will also be developed for constraint optimization problems.</p>
    <h1 id="acknowledgement">Acknowledgement</h1>
    <p>The authors acknowledge the financial support from the Slovenian Research Agency (research core funding No. P2-0057).</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Deap2012">
    <p>Félix-Antoine Fortin, Marc-André Gardner, François-Michel De Rainville, and Christian Gagné. 2012. “DEAP: Evolutionary algorithms made easy.” <em>Journal of Machine Learning Research</em> 13 (Jul):2171–5.</p>
    </div>
    <div id="ref-Inspyred2014">
    <p>Garrett, Aaron. 2014. “inspyred: Bio-inspired Algorithms in Python.” 2014. <a href="https://pypi.python.org/pypi/inspyred" class="uri">https://pypi.python.org/pypi/inspyred</a>.</p>
    </div>
    <div id="ref-Hassanien2016">
    <p>Hassanien, Aboul Ella, and Eid Emary. 2016. <em>Swarm intelligence: principles, advances, and applications</em>. CRC Press.</p>
    </div>
    <div id="ref-Evolopy2016">
    <p>Hossam Faris, Seyedali Mirjalili, Ibrahim Aljarah, and Juan J Merelo. 2016. “EvoloPy: An Open-source Nature-inspired Optimization Framework in Python.” In <em>Proceedings of the 8th International Joint Conference on Computational Intelligence</em>, 171–77.</p>
    </div>
    <div id="ref-Fister2013">
    <p>Iztok Fister Jr., Iztok Fister, Xin-She Yang, and Dušan Fister. 2013. “A Brief Review of Nature-Inspired Algorithms for Optimization.” <em>Elektrotehniški Vestnik</em> 80 (3):116–22.</p>
    </div>
    <div id="ref-Pygmo2012">
    <p>Izzo, Dario. 2012. “Pygmo and pykep: Open source tools for massively parallel optimization in astrodynamics (the case of interplanetary trajectory optimization).” In <em>Proceedings of the Fifth International Conference on Astrodynamics Tools and Techniques, ICATT</em>.</p>
    </div>
    <div id="ref-Jamil2013">
    <p>Jamil, Momin, and Xin-She Yang. 2013. “A Literature Survey of Benchmark Functions For Global Optimization Problems.” <em>International Journal of Mathematical Modelling and Numerical Optimisation</em> 4 (2):150–94. <a href="https://doi.org/10.1504/IJMMNO.2013.055204" class="uri">https://doi.org/10.1504/IJMMNO.2013.055204</a>.</p>
    </div>
    <div id="ref-Pyswarms2018">
    <p>Miranda, Lester James V. 2018. “PySwarms: a research toolkit for Particle Swarm Optimization in Python.” <em>Journal of Open Source Software</em> 3 (21). <a href="https://doi.org/10.21105/joss.00433" class="uri">https://doi.org/10.21105/joss.00433</a>.</p>
    </div>
    <div id="ref-Sorensen2015">
    <p>Sörensen, Kenneth. 2015. “Metaheuristics—the metaphor exposed.” <em>International Transactions in Operational Research</em> 22 (1). Wiley Online Library:3–18. <a href="https://doi.org/10.1111/itor.12001" class="uri">https://doi.org/10.1111/itor.12001</a>.</p>
    </div>
    <div id="ref-Yang2014">
    <p>Yang, Xin-She. 2014. <em>Nature-inspired optimization algorithms</em>. Elsevier.</p>
    </div>
    </div>
  </body>
</article>
