<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>CoreRobotics: An object-oriented C++ library with cross-language wrappers for cross-platform robot control</title>
    <authors>
      <author>
        <name>Parker Owan</name>
        <orcid>0000-0003-1160-0426</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Cameron Devine</name>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>W. Tony Piaskowy</name>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>robotics</tag>
      <tag>control</tag>
      <tag>realtime</tag>
    </tags>
    <date>21 November 2017</date>
    <paper_doi>10.21105/joss.00489</paper_doi>
    <software_repository>https://github.com/CoreRobotics/CoreRobotics</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1166214</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00489/10.21105.joss.00489.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Real-time controllers for robot manipulators are typically developed and implemented on a custom basis due to 1) the complexity of control in real application, and 2) requirement of only incremental changes in hardware and software as the design matures. Modular approaches to actuators have made it easier to quickly assemble custom robot designs to address the increasing thrust for physical automation in society. However, development of controllers for such robot platforms is often performed in resource-intensive software suites such as Robot Operating System (ROS). This approach requires unnecessarily high processor performance when the controller does not fully utilize the suite.</p>
    <p>The CoreRobotics libraries were developed in an effort to provide generalized implementations of algorithms facilitating rapid development of real-time robot control. CoreRobotics utilizes an object-oriented approach in C++ to implement fast cross-platform thread management and timing, core math solvers <span class="citation" data-cites="kreyszig">(Kreyszig 2011)</span>, manipulator control <span class="citation" data-cites="craig">(Craig 2004,<span class="citation" data-cites="murray">R. Murray and Sastry (1993)</span>,<span class="citation" data-cites="DLS">S. Buss and Kim (2005)</span>,<span class="citation" data-cites="hessian">Hourtash (2005)</span>)</span>, and trajectory shaping <span class="citation" data-cites="minJerk">(Hogan 1984)</span>, and modeling for state estimation <span class="citation" data-cites="thrun">(S. Thrun and Fox 2005,<span class="citation" data-cites="crassidis">Crassidis and Junkins (2012)</span>,<span class="citation" data-cites="smc">Arulampalam et al. (2002)</span>)</span>.</p>
    <p>An example application that makes use of the library runs a single-board computer (e.g.: a raspberry PI or similar computer) to control the motion of a small four-jointed robot arm. A controller that solves for the joint angles to achieve a desired position of the robot tool uses the CoreRobotics InverseKinematics class. To achieve smooth motions between robot tool waypoints, the controller uses the CoreRobotics TrajectoryGenerator class. The Manipulator class presents a convenient way to represent the robot and update the robot kinematics quickly when new sensor data becomes available.</p>
    <p>CoreRobotics has been compiled on Windows 8.1, 10, Linux, and MacOS on various hardware architectures. Linear algebra is handled with Eigen. CMake is used to unify the compile process across multi-platform developer environments, and an option is provided to compile Python and MATLAB wrappers using SWIG. The CoreRobotics library is used in several research projects at the University of Washington, Seattle.</p>
    <p>The authors would like to thank Professor Santosh Devasia and Professor Joseph Garbini for their support and direction during development of the software library.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-smc">
    <p>Arulampalam, M.S., S. Maskell, N. Gordon, and T. Clapp. 2002. “A Tutorial on Particle Filters for Online Nonlinear/Non-Gaussian Bayesian Tracking.” <em>IEEE Transactions on Signal Processing</em> 50 (2):174–88. <a href="https://doi.org/10.1109/78.978374" class="uri">https://doi.org/10.1109/78.978374</a>.</p>
    </div>
    <div id="ref-craig">
    <p>Craig, J. 2004. <em>Introduction to Robotics: Mechanics and Control</em>. 3rd ed. Pearson.</p>
    </div>
    <div id="ref-crassidis">
    <p>Crassidis, J., and J. Junkins. 2012. <em>Optimal Estimation of Dynamic Systems</em>. 2nd ed. Boca Raton, FL: CRC Press.</p>
    </div>
    <div id="ref-minJerk">
    <p>Hogan, N. 1984. “Adaptive Control of Mechanical Impedance by Coactivation of Antagonist Muscles.” IEEE Trans. on Automatic Control AC-29, 681–90. <a href="https://doi.org/10.1109/TAC.1984.1103644" class="uri">https://doi.org/10.1109/TAC.1984.1103644</a>.</p>
    </div>
    <div id="ref-hessian">
    <p>Hourtash, A. 2005. “The Kinematic Hessian and Higher Derivatives.” IEEE International Symposium on Computational Intelligence in Robotics; Automation, 169–74. <a href="https://doi.org/10.1109/CIRA.2005.1554272" class="uri">https://doi.org/10.1109/CIRA.2005.1554272</a>.</p>
    </div>
    <div id="ref-kreyszig">
    <p>Kreyszig, E. 2011. <em>Advanced Engineering Mathematics</em>. 10th ed. Hoboken, NJ: John Wiley &amp; Sons.</p>
    </div>
    <div id="ref-murray">
    <p>R. Murray, Z. Li, and S. Sastry. 1993. <em>A Mathematical Introduction to Robot Manipulation</em>. 1st ed. CRC Press.</p>
    </div>
    <div id="ref-DLS">
    <p>S. Buss, and J. Kim. 2005. “Selectively Damped Least Squares for Inverse Kinematics.” <em>Journal of Graphics Tools</em> 10 (3):37–49. <a href="https://doi.org/10.1080/2151237X.2005.10129202" class="uri">https://doi.org/10.1080/2151237X.2005.10129202</a>.</p>
    </div>
    <div id="ref-thrun">
    <p>S. Thrun, W. Burgard, and D. Fox. 2005. <em>Probabilistic Robotics</em>. Cambridge, MA: MIT Press.</p>
    </div>
    </div>
  </body>
</article>
