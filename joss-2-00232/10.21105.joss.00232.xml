<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>libqcpp: A C++14 sequence quality control library</title>
    <authors>
      <author>
        <name>Kevin D Murray</name>
        <orcid>0000-0002-2466-1917</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Justin O Borevitz</name>
        <orcid>0000-0001-8408-3699</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>next-generation sequencing</tag>
      <tag>c++</tag>
      <tag>bioinformatics</tag>
    </tags>
    <date>03 April 2017</date>
    <paper_doi>10.21105/joss.00232</paper_doi>
    <software_repository>https://github.com/kdmurray91/libqcpp</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.583325</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/raw/master/joss.00232/10.21105.joss.00232.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Libqcpp implements a variety of algorithms for Next-generation Sequencing (NGS) data quality control. These algorithms include:</p>
    <ul>
    <li>Sliding-window quality score trimming, using an algorithm based on Sickle <span class="citation">(Joshi and Fass 2011)</span>.</li>
    <li>A combined adaptor removal and read merging algorithm for paired end reads that uses global pairwise alignment of reads. This algorithm is similar to AdapterRemoval <span class="citation">(Lindgreen 2012)</span>.</li>
    <li>Cycle-wise summarisation of base quality scores, similar to FastQC <span class="citation">(Andrews 2012)</span></li>
    </ul>
    <p>Libqcpp allows simple composition of quality control pipelines that combine these features into a single unit. Application code can then simply read from a stream of sequence reads that have passed quality control measures. Optionally, parsing and quality control can occur in one or more background threads for efficiency. Reports detailing actions performed and summaries of results may be obtained in YAML format. Libqcpp includes <code>trimit</code>, a command line interface to these features for those not building their own applications.</p>
    <p>Libqcpp uses the SeqAn library for sequence parsing and alignment <span class="citation">(Döring et al. 2008)</span>, libyaml-cpp for YAML report generation, and Catch for unit testing. Documentation on API and command line usage is included, and available at https://qcpp.readthedocs.io/.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-andrews12_fastqc">
    <p>Andrews, S. 2012. “FastQC A Quality Control Tool for High Throughput Sequence Data.” <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/" class="uri">http://www.bioinformatics.babraham.ac.uk/projects/fastqc/</a>.</p>
    </div>
    <div id="ref-doring08_seqan">
    <p>Döring, Andreas, David Weese, Tobias Rausch, and Knut Reinert. 2008. “SeqAn an Efficient, Generic C++ Library for Sequence Analysis.” <em>BMC Bioinformatics</em> 9: 11. doi:<a href="https://doi.org/10.1186/1471-2105-9-11">10.1186/1471-2105-9-11</a>.</p>
    </div>
    <div id="ref-joshi11_sickle">
    <p>Joshi, N A, and J N Fass. 2011. <em>Sickle: A Sliding-Window, Adaptive, Quality-Based Trimming Tool for FastQ Files</em> (version 1.33). <a href="https://github.com/najoshi/sickle." class="uri">https://github.com/najoshi/sickle.</a></p>
    </div>
    <div id="ref-lindgreen12_adapterremoval">
    <p>Lindgreen, Stinus. 2012. “AdapterRemoval: Easy Cleaning of Next-Generation Sequencing Reads.” <em>BMC Research Notes</em> 5: 337. doi:<a href="https://doi.org/10.1186/1756-0500-5-337">10.1186/1756-0500-5-337</a>.</p>
    </div>
    </div>
  </body>
</article>
