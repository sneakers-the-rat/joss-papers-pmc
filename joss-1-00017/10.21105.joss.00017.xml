<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>Application Skeleton: Generating Synthetic Applications for Infrastructure Research</title>
    <authors>
      <author>
        <name>Zhao Zhang</name>
        <orcid>0000-0001-5921-0035</orcid>
        <affiliation>
          <orgname>
            AMPLab and BIDS, University of California, Berkeley
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Daniel S. Katz</name>
        <orcid>0000-0001-5934-7525</orcid>
        <affiliation>
          <orgname>
            National Center for Supercomputing Applications, University of Illinois Urbana-Champaign
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Andre Merzky</name>
        <orcid>0000-0002-7228-4327</orcid>
        <affiliation>
          <orgname>
            RADICAL Laboratory, Rutgers University
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Matteo Turilli</name>
        <orcid>0000-0003-0527-1435</orcid>
        <affiliation>
          <orgname>
            RADICAL Laboratory, Rutgers University
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Shantenu Jha</name>
        <orcid>0000-0002-5040-026X</orcid>
        <affiliation>
          <orgname>
            RADICAL Laboratory, Rutgers University
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Yadu Nand</name>
        <orcid>0000-0002-9162-6003</orcid>
        <affiliation>
          <orgname>
            Computation Institute, University of Chicago
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>computational science</tag>
      <tag>data science</tag>
      <tag>application modeling</tag>
      <tag>system modeling</tag>
      <tag>performance modeling</tag>
      <tag>parallel and distributed systems</tag>
    </tags>
    <date>5 May 2016</date>
    <paper_doi>10.21105/joss.00017</paper_doi>
    <software_repository>https://github.com/applicationskeleton/Skeleton</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.13750</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00017/10.21105.joss.00017.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Application Skeleton is a simple and powerful tool to build simplified synthetic science and engineering applications (for example, modeling and simulation, data analysis) with runtime and I/O close to that of the real applications. It is intended for applied computer scientists who need to use science and engineering applications to verify the effectiveness of new systems designed to efficiently run such applications, so that they can bypass obstacles that they often encounter when accessing and building real science and engineering applications. Using the applications generated by Application Skeleton guarantees that the CS systems' effectiveness on synthetic applications will apply to the real applications.</p>
    <p>Application Skeleton can generate bag-of-task, (iterative) map-reduce, and (iterative) multistage workflow applications. These applications are represented as a set of tasks, a set of input files, and a set of dependencies. These applications can be generally considered many-task applications, and once created, can be run on single-core, single-node, multi-core, or multi-node (distributed or parallel) computers, depending on what workflow system is used to run them. The generated applications are compatible with workflow system such as Swift <span class="citation">(Zhao et al. 2007, <span class="citation">Wilde et al. (2009)</span>, <span class="citation">Wilde et al. (2011)</span>)</span> and Pegasus <span class="citation">(Ewa Deelman et al. 2004, <span class="citation">E. Deelman et al. (2005)</span>)</span>, as well as the ubiquitous UNIX shell. The application can also be created as a generic JSON object that can be used by other systems such as the AIMES <span class="citation">(Turilli et al. 2015)</span> middleware.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-PEGASUS05">
    <p>Deelman, E., G. Singh, M.-H. Su, J. Blythe, Y. Gil, C. Kesselman, G. Mehta, et al. 2005. “Pegasus: A Framework for Mapping Complex Scientific Workflows onto Distributed Systems.” <em>Scientific Programming Journal</em> 13 (3): 219–37. doi:<a href="https://doi.org/10.1155/2005/128026">10.1155/2005/128026</a>.</p>
    </div>
    <div id="ref-PEGASUS04">
    <p>Deelman, Ewa, James Blythe, Yolanda Gil, Carl Kesselman, Gaurang Mehta, Sonal Patil, Mei-Hui Su, Karan Vahi, and Miron Livny. 2004. “Pegasus: Mapping Scientific Workflows onto the Grid.” In <em>Grid Computing</em>, edited by Marios D. Dikaiakos, 3165:131–40. Lect. Notes in Comp. Sci. Springer. doi:<a href="https://doi.org/10.1007/978-3-540-28642-4_2">10.1007/978-3-540-28642-4_2</a>.</p>
    </div>
    <div id="ref-AIMES15">
    <p>Turilli, Matteo, Zhao Zhang, Andre Merzky, Michael Wilde, Jon Weissman, Daniel S Katz, Shantenu Jha, and others. 2015. “Integrating Abstractions to Enhance the Execution of Distributed Applications.” <em>ArXiv Preprint ArXiv:1504.04720</em>.</p>
    </div>
    <div id="ref-SWIFT09">
    <p>Wilde, Michael, Ian Foster, Kamil Iskra, Pete Beckman, Zhao Zhang, Allan Espinosa, Mihael Hategan, Ben Clifford, and Ioan Raicu. 2009. “Parallel Scripting for Applications at the Petascale and Beyond.” <em>Computer</em> 42. IEEE Computer Society: 50–60. doi:<a href="https://doi.org/10.1109/MC.2009.365">10.1109/MC.2009.365</a>.</p>
    </div>
    <div id="ref-SWIFT11">
    <p>Wilde, Michael, Mihael Hategan, Justin M. Wozniak, Ben Clifford, Daniel S. Katz, and Ian Foster. 2011. “Swift: A Language for Distributed Parallel Scripting.” <em>Par. Comp.</em>, September, 633–52. doi:<a href="https://doi.org/10.1016/j.parco.2011.05.005">10.1016/j.parco.2011.05.005</a>.</p>
    </div>
    <div id="ref-SWIFT07">
    <p>Zhao, Yong, Mihael Hategan, Ben Clifford, Ian Foster, Gregor Von Laszewski, Veronika Nefedova, Ioan Raicu, Tiberiu Stef-Praun, and Michael Wilde. 2007. “Swift: Fast, Reliable, Loosely Coupled Parallel Computation.” In <em>IEEE Congress on Services</em>, 199–206. IEEE. doi:<a href="https://doi.org/10.1109/SERVICES.2007.63">10.1109/SERVICES.2007.63</a>.</p>
    </div>
    </div>
  </body>
</article>
