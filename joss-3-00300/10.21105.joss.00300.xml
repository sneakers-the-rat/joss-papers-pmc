<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>opty: Software for trajectory optimization and parameter identification using direct collocation</title>
    <authors>
      <author>
        <name>Jason K. Moore</name>
        <orcid>0000-0002-8698-6143</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Antonie van den Bogert</name>
        <orcid>0000-0002-3791-3749</orcid>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>optimal control</tag>
      <tag>trajectory optimization</tag>
      <tag>parameter identification</tag>
      <tag>direct collocation</tag>
      <tag>nonlinear programming</tag>
      <tag>symbolic computation</tag>
    </tags>
    <date>04 June 2017</date>
    <paper_doi>10.21105/joss.00300</paper_doi>
    <software_repository>https://github.com/csu-hmc/opty</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1162870</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00300/10.21105.joss.00300.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>opty is a tool for describing and solving trajectory optimization and parameter identification problems based on symbolic descriptions of ordinary differential equations and differential algebriac equations that describe a dynamical system. The motivation for its development resides in the need to solve optimal control problems of biomechanical systems. The target audience is engineers and scientists interested in solving nonlinear optimal control and parameter identification problems with minimal computational overhead.</p>
    <p>A user of opty is responsible for specifying the system’s dynamics (the ODE/DAEs), the cost or fitness function, bounds on the solution, and the initial guess for the solution. opty uses this problem specification to derive the constraints needed to solve the optimization problem using the direct collocation method <span class="citation" data-cites="Betts2010">(Betts 2010)</span>. This method maps the problem to a non-linear programming problem and the result is then solved numerically with an interior point optimizer IPOPT <span class="citation" data-cites="Wachter2006">(Wächter and Biegler 2006)</span> which is wrapped by cyipopt <span class="citation" data-cites="Cyipopt2017">(cyipopt Developers 2017)</span> for use in Python. The software allows the user to describe the dynamical system of interest at a high level in symbolic form without needing to concern themselves with the numerical computation details. This is made possible by utilizing SymPy <span class="citation" data-cites="Meurer2017">(Meurer et al. 2017)</span> and Cython <span class="citation" data-cites="Behnel2011">(Behnel et al. 2011)</span> for code generation and just-in-time compilation to obtain wrap optimized C functions that are accessible in Python.</p>
    <p>Direct collocation methods have been especially successful in the field of human movement <span class="citation" data-cites="Ackermann2010">(Ackermann and Bogert 2010, <span class="citation" data-cites="vandenBogert2012">A. J. van den Bogert et al. (2012)</span>)</span> because those systems are highly nonlinear, dynamically stiff, and unstable with open loop control. Typically, closed-source tools were used for multibody dynamics (e.g. SD/Fast, Autolev), for optimization (SNOPT), and for the programming environment (Matlab). Recently, promising work has been done with the Opensim/Simbody dynamics engine <span class="citation" data-cites="LeeUmberger2016">(Lee and Umberger 2016, <span class="citation" data-cites="LinPandy2017">Lin and Pandy (2017)</span>)</span>, but this requires that Jacobian matrices are approximated by finite differences. In contrast, opty provides symbolic differentiation which makes the code faster and prevents poor convergence when the severe nonlinearity causes finite differences to be inaccurate. Furthermore, opty allows the system to be formulated using an implicit differential equation, which often results in far simpler equations and better numerical conditioning. The first application of opty was in the identification of feedback control parameters for human standing <span class="citation" data-cites="MooreTGCS2015">(Moore and Bogert 2015)</span>. It should be noted that opty can use any dynamic system model and is not limited to human movement.</p>
    <p>Presently, opty only implements first order (backward Euler) and second order (midpoint Euler) approximations of the dynamics. Higher accuracy and/or larger time steps can be achieved with higher order polynomials <span class="citation" data-cites="PattersonRao2014">(Patterson and Rao 2014)</span>, and opty could be extended towards such capabilities. In our experience, however, the low order discretizations provide more robust convergence to the globally optimal trajectory in a nonlinear system when a good initial guess is not available <span class="citation" data-cites="Zarei2016">(Zarei 2016)</span>.</p>
    <p>There are existing software packages that can solve optimal control problems and have have similarities to opty. Below, is a feature comparison of those we are aware of:</p>
    
    <table>
    <colgroup>
    <col style="width: 7%" />
    <col style="width: 11%" />
    <col style="width: 7%" />
    <col style="width: 9%" />
    <col style="width: 16%" />
    <col style="width: 13%" />
    <col style="width: 10%" />
    <col style="width: 9%" />
    <col style="width: 13%" />
    </colgroup>
    <thead>
    <tr class="header">
    <th>Name</th>
    <th>Citation</th>
    <th>Language</th>
    <th>License</th>
    <th>Derivatives</th>
    <th>Discretization</th>
    <th>Implicit Dynamics</th>
    <th>Solvers</th>
    <th>Project Website</th>
    </tr>
    </thead>
    <tbody>
    <tr class="odd">
    <td>Casadi<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></td>
    <td><span class="citation" data-cites="Andersson2013">(Andersson 2013)</span></td>
    <td>C++, Python, Octave,</td>
    <td>LGPL</td>
    <td>Automatic differentiation</td>
    <td>None</td>
    <td>Yes</td>
    <td>IPOPT, WORHP, SNOPT, KNITRO</td>
    <td><a href="https://github.com/casadi/casadi/wiki">Casadi Website</a></td>
    </tr>
    <tr class="even">
    <td>DIDO</td>
    <td><span class="citation" data-cites="Ross2002">(Ross and Fahroo 2002)</span></td>
    <td>Matlab</td>
    <td>Commercial</td>
    <td>Analytic</td>
    <td>Pseudospectral</td>
    <td>Yes</td>
    <td>built-in</td>
    <td><a href="http://www.elissarglobal.com/industry/products/software-3">DIDO Website</a></td>
    </tr>
    <tr class="odd">
    <td>DIRCOL</td>
    <td><span class="citation" data-cites="vonStryk1992">(Stryk and Bulirsch 1992)</span></td>
    <td>Fortran</td>
    <td>Non-commercial</td>
    <td>Finite differences</td>
    <td>Piecewise linear/cubic</td>
    <td>Yes</td>
    <td>NPSOL, SNOPT</td>
    <td><a href="http://www.sim.informatik.tu-darmstadt.de/en/res/sw/dircol">DIRCOL Website</a></td>
    </tr>
    <tr class="even">
    <td>DYNOPT</td>
    <td><span class="citation" data-cites="Cizniar2005">(“DYNOPT - Dynamic Optimisation Code for Matlab” 2005)</span></td>
    <td>Matlab</td>
    <td>Custom Open Source, Non-commercial</td>
    <td>Must be supplied by user</td>
    <td>Pseudospectral</td>
    <td>Mass matrix</td>
    <td>fmincon</td>
    <td><a href="https://bitbucket.org/dynopt">DYNOPT Code</a></td>
    </tr>
    <tr class="odd">
    <td>FROST</td>
    <td><span class="citation" data-cites="Hereid2017">(Hereid and Ames 2017)</span></td>
    <td>Matlab, Mathematica</td>
    <td>BSD 3-Clause</td>
    <td>Analytic</td>
    <td>?</td>
    <td>?</td>
    <td>IPOPT, fmincon</td>
    <td><a href="http://ayonga.github.io/frost-dev">FROST Documentation</a></td>
    </tr>
    <tr class="even">
    <td>GESOP</td>
    <td><span class="citation" data-cites="Gath2001">(Gath and Well 2001)</span></td>
    <td>Matlab, C, Fortan, Ada</td>
    <td>Commercial</td>
    <td>?</td>
    <td>Pseudospectral</td>
    <td>No</td>
    <td>SLLSQP, SNOPT, SOCS</td>
    <td><a href="https://www.astos.de/products/gesop">Astos Solutions Gmbh</a></td>
    </tr>
    <tr class="odd">
    <td>GPOPS</td>
    <td><span class="citation" data-cites="PattersonRao2014">(Patterson and Rao 2014)</span></td>
    <td>Matlab</td>
    <td>Commercial</td>
    <td>Automatic differentiation</td>
    <td>Pseudospectral</td>
    <td>No</td>
    <td>SNOPT, IPOPT</td>
    <td><a href="http://www.gpops2.com">GPOPS Website</a></td>
    </tr>
    <tr class="even">
    <td>opty</td>
    <td>NA</td>
    <td>Python</td>
    <td>BSD 2-Clause</td>
    <td>Analytic</td>
    <td>Euler, Midpoint</td>
    <td>Yes</td>
    <td>IPOPT</td>
    <td><a href="http://opty.readthedocs.io">opty Documentation</a></td>
    </tr>
    <tr class="odd">
    <td>OTIS</td>
    <td><span class="citation" data-cites="Hargraves1987">(Hargraves and Paris 1987)</span></td>
    <td>Fortran</td>
    <td>US Export Controlled</td>
    <td>?</td>
    <td>Gauss-Labatto, Pseudospectral</td>
    <td>Yes</td>
    <td>SNOPT</td>
    <td><a href="https://otis.grc.nasa.gov">OTIS Website</a></td>
    </tr>
    <tr class="even">
    <td>PROPT</td>
    <td><span class="citation" data-cites="Rutquist2010">(Rutquist and Edvall 2010)</span></td>
    <td>Matlab</td>
    <td>Commercial</td>
    <td>Analytic</td>
    <td>Pseudospectral</td>
    <td>Yes</td>
    <td>SNOPT, KNITRO</td>
    <td><a href="http://tomdyn.com/index.html">TOMDYN Website</a></td>
    </tr>
    <tr class="odd">
    <td>PSOPT</td>
    <td><span class="citation" data-cites="Becerra2010">(“Solving Complex Optimal Control Problems at No Cost with PSOPT” 2010)</span></td>
    <td>C++</td>
    <td>GPL</td>
    <td>Automatic differentiation, Sparse finite differences</td>
    <td>Pseudospectral, RK</td>
    <td>Yes</td>
    <td>IPOPT, SNOPT</td>
    <td><a href="http://www.psopt.org">PSOPT Website</a></td>
    </tr>
    <tr class="even">
    <td>SOCS</td>
    <td><span class="citation" data-cites="Betts2010">(Betts 2010)</span></td>
    <td>Fortran</td>
    <td>Commercial</td>
    <td>Finite differences</td>
    <td>Euler, RK, &amp; others</td>
    <td>Yes</td>
    <td>built-in</td>
    <td><a href="http://www.boeing.com/assets/pdf/phantom/socs/docs/SOCS_Users_Guide.pdf">SOCS Documentation</a></td>
    </tr>
    </tbody>
    </table>
    
    <p>Each of these software packages offer a different combination of attributes and features that make it useful for different problems. opty is the only package that has a liberal open source license for itself and its dependencies, following precedent set by other core scientific Python packages. This allows anyone to use and modify the code without having to share the source of their application. opty also is the only package, open source or not, that allows (in fact forces) the user to describe their problem via a high level symbolic mathematical description using the API of a widely used computer algebra system instead of a domain specific language. This relieves the user from having to translate the much simpler continuous problem definition into a discretize NLP problem. opty leverages the popular Scientific Python core tools like NumPy, SymPy, Cython, and matplotlib allowing users to include opty code into Python programs. Lastly, the numeric code generated by opty to evaluate the NLP constraints is optimized providing extremely efficient parallel evaluation of the contraints. This becomes very valuable for high dimensional dynamics. opty currently does not offer a wide range of discretization methods nor support for solvers other than IPOPT, but those could relatively easily be added based on user need.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Ackermann2010">
    <p>Ackermann, Marko, and Antonie J. van den Bogert. 2010. “Optimality Principles for Model-Based Prediction of Human Gait.” <em>Journal of Biomechanics</em> 43 (6):1055–60. <a href="https://doi.org/https://doi.org/10.1016/j.jbiomech.2009.12.012" class="uri">https://doi.org/https://doi.org/10.1016/j.jbiomech.2009.12.012</a>.</p>
    </div>
    <div id="ref-Andersson2013">
    <p>Andersson, Joel. 2013. “A General-Purpose Software Framework for Dynamic Optimization.” PhD thesis, Department of Electrical Engineering (ESAT/SCD); Optimization in Engineering Center, Kasteelpark Arenberg 10, 3001-Heverlee, Belgium: Arenberg Doctoral School, KU Leuven.</p>
    </div>
    <div id="ref-Behnel2011">
    <p>Behnel, S., R. Bradshaw, C. Citro, L. Dalcin, D.S. Seljebotn, and K. Smith. 2011. “Cython: The Best of Both Worlds.” <em>Computing in Science Engineering</em> 13 (2):31–39. <a href="https://doi.org/10.1109/MCSE.2010.118" class="uri">https://doi.org/10.1109/MCSE.2010.118</a>.</p>
    </div>
    <div id="ref-Betts2010">
    <p>Betts, J. 2010. <em>Practical Methods for Optimal Control and Estimation Using Nonlinear Programming</em>. Advances in Design and Control. Society for Industrial; Applied Mathematics. <a href="https://doi.org/10.1137/1.9780898718577" class="uri">https://doi.org/10.1137/1.9780898718577</a>.</p>
    </div>
    <div id="ref-vandenBogert2012">
    <p>Bogert, Antonie J van den, Maarten Hupperets, Heiko Schlarb, and Berthold Krabbe. 2012. “Predictive Musculoskeletal Simulation Using Optimal Control: Effects of Added Limb Mass on Energy Cost and Kinematics of Walking and Running.” <em>Proceedings of the Institution of Mechanical Engineers, Part P: Journal of Sports Engineering and Technology</em> 226 (2):123–33. <a href="https://doi.org/10.1177/1754337112440644" class="uri">https://doi.org/10.1177/1754337112440644</a>.</p>
    </div>
    <div id="ref-Cyipopt2017">
    <p>cyipopt Developers. 2017. “Cyipopt: Cython Interface for the Interior Point Optimzer IPOPT.”</p>
    </div>
    <div id="ref-Cizniar2005">
    <p>“DYNOPT - Dynamic Optimisation Code for Matlab.” 2005. In <em>13th Annual Conference Proceedings of Technical Computing Prague 2005</em>. Praha: Humusoft. <a href="http://www.kirp.chtf.stuba.sk/publication_info.php?id_pub=255" class="uri">http://www.kirp.chtf.stuba.sk/publication_info.php?id_pub=255</a>.</p>
    </div>
    <div id="ref-Gath2001">
    <p>Gath, Peter, and Klaus Well. 2001. “Trajectory Optimization Using a Combination of Direct Multiple Shooting and Collocation.” In <em>AIAA Guidance, Navigation, and Control Conference and Exhibit</em>. American Institute of Aeronautics; Astronautics. <a href="https://doi.org/10.2514/6.2001-4047" class="uri">https://doi.org/10.2514/6.2001-4047</a>.</p>
    </div>
    <div id="ref-Hargraves1987">
    <p>Hargraves, C. R., and S. W. Paris. 1987. “Direct Trajectory Optimization Using Nonlinear Programming and Collocation.” <em>AIAA Journal of Guidance, Control, and Dynamics</em> 10 (4):338–42.</p>
    </div>
    <div id="ref-Hereid2017">
    <p>Hereid, Ayonga, and Aaron D. Ames. 2017. “FROST: Fast Robot Optimization and Simulation Toolkit.” In <em>IEEE/Rsj International Conference on Intelligent Robots and Systems (Iros)</em>. Vancouver, BC, Canada: IEEE/RSJ.</p>
    </div>
    <div id="ref-LeeUmberger2016">
    <p>Lee, Leng-Feng, and Brian R. Umberger. 2016. “Generating Optimal Control Simulations of Musculoskeletal Movement Using OpenSim and MATLAB.” <em>PeerJ</em> 4 (January):e1638. <a href="https://doi.org/10.7717/peerj.1638" class="uri">https://doi.org/10.7717/peerj.1638</a>.</p>
    </div>
    <div id="ref-LinPandy2017">
    <p>Lin, Yi-Chung, and Marcus G. Pandy. 2017. “Three-Dimensional Data-Tracking Dynamic Optimization Simulations of Human Locomotion Generated by Direct Collocation.” <em>Journal of Biomechanics</em> 59 (Supplement C):1–8. <a href="https://doi.org/https://doi.org/10.1016/j.jbiomech.2017.04.038" class="uri">https://doi.org/https://doi.org/10.1016/j.jbiomech.2017.04.038</a>.</p>
    </div>
    <div id="ref-Meurer2017">
    <p>Meurer, Aaron, Christopher P. Smith, Mateusz Paprocki, Ondřej Čertík, Sergey B. Kirpichev, Matthew Rocklin, AMiT Kumar, et al. 2017. “SymPy: symbolic Computing in Python.” <em>PeerJ Computer Science</em> 3 (January):e103. <a href="https://doi.org/10.7717/peerj-cs.103" class="uri">https://doi.org/10.7717/peerj-cs.103</a>.</p>
    </div>
    <div id="ref-MooreTGCS2015">
    <p>Moore, Jason K., and Antonie J. van den Bogert. 2015. “Quiet Standing Control Parameter Identification with Direct Collocation.” In <em>15th International Symposium on Computer Simulation in Biomechanics</em>, 21–22. Glasgow, U.K.</p>
    </div>
    <div id="ref-PattersonRao2014">
    <p>Patterson, Michael A., and Anil V. Rao. 2014. “GPOPS-Ii: A MATLAB Software for Solving Multiple-Phase Optimal Control Problems Using Hp-Adaptive Gaussian Quadrature Collocation Methods and Sparse Nonlinear Programming.” <em>ACM Trans. Math. Softw.</em> 41 (1). New York, NY, USA: ACM:1:1–1:37. <a href="https://doi.org/10.1145/2558904" class="uri">https://doi.org/10.1145/2558904</a>.</p>
    </div>
    <div id="ref-Ross2002">
    <p>Ross, I. Michael, and Fariba Fahroo. 2002. “A Direct Method for Solving Nonsmooth Optimal Control Problems.” <em>IFAC Proceedings Volumes</em> 35 (1):479–84. <a href="https://doi.org/https://doi.org/10.3182/20020721-6-ES-1901.00329" class="uri">https://doi.org/https://doi.org/10.3182/20020721-6-ES-1901.00329</a>.</p>
    </div>
    <div id="ref-Rutquist2010">
    <p>Rutquist, Per E, and Marcus M Edvall. 2010. “Propt-Matlab Optimal Control Software.” 1. Vol. 260. Tomlab Optimization Inc.</p>
    </div>
    <div id="ref-Becerra2010">
    <p>“Solving Complex Optimal Control Problems at No Cost with PSOPT.” 2010. In, 1391–6. <a href="https://doi.org/10.1109/CACSD.2010.5612676" class="uri">https://doi.org/10.1109/CACSD.2010.5612676</a>.</p>
    </div>
    <div id="ref-vonStryk1992">
    <p>Stryk, O. von, and R. Bulirsch. 1992. “Direct and Indirect Methods for Trajectory Optimization.” <em>Annals of Operations Research</em> 37 (1):357–73. <a href="https://doi.org/10.1007/BF02071065" class="uri">https://doi.org/10.1007/BF02071065</a>.</p>
    </div>
    <div id="ref-Wachter2006">
    <p>Wächter, Andreas, and Lorenz T. Biegler. 2006. “On the Implementation of an Interior-Point Filter Line-Search Algorithm for Large-Scale Nonlinear Programming.” <em>Mathematical Programming</em> 106 (1):25–57. <a href="https://doi.org/10.1007/s10107-004-0559-y" class="uri">https://doi.org/10.1007/s10107-004-0559-y</a>.</p>
    </div>
    <div id="ref-Zarei2016">
    <p>Zarei, Milad. 2016. “Predictive Simulation of Rowing Exercise.” Master’s thesis, Cleveland State University; Cleveland State University. <a href="http://rave.ohiolink.edu/etdc/view?acc_num=csu1472557492" class="uri">http://rave.ohiolink.edu/etdc/view?acc_num=csu1472557492</a>.</p>
    </div>
    </div>
    <section class="footnotes">
    <hr />
    <ol>
    <li id="fn1"><p>Casadi does not have a built in direct collocation transcription but includes examples which show how to do so for specific problems.<a href="#fnref1" class="footnote-back">↩</a></p></li>
    </ol>
    </section>
  </body>
</article>
