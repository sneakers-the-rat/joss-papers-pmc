<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>SurvivalVolume: interactive volume threshold survival graphs</title>
    <authors>
      <author>
        <name>Matthew J. Wakefield</name>
        <orcid>0000-0001-6624-4698</orcid>
        <affiliation>
          <orgname>
            1,2
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>bioinformatics</tag>
      <tag>biostatisics</tag>
      <tag>visualisation</tag>
      <tag>treatment studies</tag>
    </tags>
    <date>31 Oct 2016</date>
    <paper_doi>10.21105/joss.00111</paper_doi>
    <software_repository>https://github.com/genomematt/survivalvolume</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.200268</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/blob/master/joss.00111/10.21105.joss.00111.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>Treatment studies of cancer frequently use tumour volume to measure response to therapy. Therapeutic response will be apparent at different time points during the experiment. Progressive disease (increasing volume), stable disease and regression (reduction in volume) under therapy are important measures of response in addition to the overall time to reach a defined maximum volume. Traditional methods of presenting this data involve 3 unconnected graphs: line graphs of each individual, average volume of each group with standard error of the mean, and a Kaplan-Meier graph of time to maximum volume. Survival volume is a python package to produce an integrated plot of these three representations of the same data, and to provide interaction with the plots of volume to enhance exploration of outliers and subgroups that are of interest clinically.</p>
    <p>Survival volume is written for python3 and uses matplotlib <span class="citation">(Hunter 2007)</span> and lifelines <span class="citation">(C. 2016)</span> Kaplan-Meier <span class="citation">(Kaplan and Meier 1958)</span> implementation for generating plots, mpld3 <span class="citation">(Vanderplas 2016)</span> for interactivity. Utility functions are provided for importing data from spreadsheets using xlrd <span class="citation">(Machin 2016)</span>, preprocessing to provide consistent time scales for comparison of treatments, and conversion from volume measurements to survival format. Statistics are calculated using lifelines and scipy.stats <span class="citation">(Jones et al. 2001–2001--)</span>. Pandas <span class="citation">(McKinney 2010)</span> data frames are used to provide flexible manipulation of data and use within Jupyter <span class="citation">(Pérez and Granger 2007)</span> notebooks is supported and encouraged.</p>
    <p>Plot elements are presented in a visual hierarchy giving greatest weight to the information rich mean, and transparency is used to legibly overplot the confidence interval of the mean and the complete dataset. Interactivity through mouseover and plot zooming provides rich access to the full data set. By co-plotting the Kaplan-Meier representation with a shared x-axis endpoint and censoring events can be related between the plots enriching the information accessible about each event.</p>
    <p>Survival volume is released under the GPLv3 and is available from GitHub and PyPI.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-LIFELINES">
    <p>C., Davidson-Pilon. 2016. “Lifelines.” <em>GitHub Repository</em>. <a href="https://github.com/camdavidsonpilon/lifelines" class="uri">https://github.com/camdavidsonpilon/lifelines</a>; GitHub.</p>
    </div>
    <div id="ref-MATPLOTLIB">
    <p>Hunter, J. D. 2007. “Matplotlib: A 2D Graphics Environment.” <em>Computing In Science &amp; Engineering</em> 9 (3). IEEE COMPUTER SOC: 90–95.</p>
    </div>
    <div id="ref-SCIPY">
    <p>Jones, Eric, Travis Oliphant, Pearu Peterson, and others. 2001–2001--. “SciPy: Open Source Scientific Tools for Python.” <a href="http://www.scipy.org/" class="uri">http://www.scipy.org/</a>.</p>
    </div>
    <div id="ref-KAPLANMEIER">
    <p>Kaplan, E. L., and Paul Meier. 1958. “Nonparametric Estimation from Incomplete Observations.” <em>Journal of the American Statistical Association</em> 53 (282): 457–81. doi:<a href="https://doi.org/10.1080/01621459.1958.10501452">10.1080/01621459.1958.10501452</a>.</p>
    </div>
    <div id="ref-Machin">
    <p>Machin, John. 2016. “xlrd: A Library to Extract Data from Microsoft Excel (Tm) Files.” <em>GitHub Repository</em>. GitHub. <a href="https://github.com/python-excel/xlrd" class="uri">https://github.com/python-excel/xlrd</a>.</p>
    </div>
    <div id="ref-PANDAS">
    <p>McKinney, Wes. 2010. “Data Structures for Statistical Computing in Python.” In <em>Proceedings of the 9th Python in Science Conference</em>, edited by Stéfan van der Walt and Jarrod Millman, 51–56.</p>
    </div>
    <div id="ref-IPYTHON">
    <p>Pérez, Fernando, and Brian E. Granger. 2007. “IPython: A System for Interactive Scientific Computing.” <em>Computing in Science and Engineering</em> 9 (3). IEEE Computer Society: 21–29. doi:<a href="https://doi.org/10.1109/MCSE.2007.53">10.1109/MCSE.2007.53</a>.</p>
    </div>
    <div id="ref-MPLD3">
    <p>Vanderplas, Jake. 2016. “mpld3: A D3 Viewer for Matplotlib.” <em>GitHub Repository</em>. GitHub. <a href="http://www.scipy.org/" class="uri">http://www.scipy.org/</a>.</p>
    </div>
    </div>
  </body>
</article>
