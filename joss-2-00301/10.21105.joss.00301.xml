<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>cuIBM: a GPU-based immersed boundary method code</title>
    <authors>
      <author>
        <name>Anush Krishnan</name>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Olivier Mesnard</name>
        <orcid>0000-0001-5335-7853</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Lorena A. Barba</name>
        <orcid>0000-0001-5812-2711</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>GPU</tag>
      <tag>Computational Fluid Dynamics</tag>
      <tag>Immersed-Boundary Method</tag>
      <tag>CUSP library</tag>
    </tags>
    <date>9 June 2017</date>
    <paper_doi>10.21105/joss.00301</paper_doi>
    <software_repository>https://github.com/barbagroup/cuIBM</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.832338</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/raw/master/joss.00301/10.21105.joss.00301.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>cuIBM solves the two-dimensional Navier-Stokes equations with an immersed-boundary method on structured Cartesian grids. With this solution approach, we remove the constraint for the computational grid to fit to the surface of a body immersed in a fluid. This has the advantage of requiring simple and easy-to-generate fixed Cartesian grids. cuIBM can be used to simulate the flow around fixed or moving bodies without the need to re-generate grids. Example applications may include flapping airfoils for the study of animal flight or fish locomotion. The equations are spatially discretized with a finite-difference technique and temporally integrated via a projection approach seen as an approximate block-LU decomposition (<span class="citation">Perot (1993)</span>). cuIBM implements various immersed-boundary techniques that fit into the framework of Perot's projection method. Among them are the immersed-boundary projection approach from <span class="citation">Taira and Colonius (2007)</span>, the direct-forcing method from <span class="citation">Fadlun et al. (2000)</span>, and a second-order accurate direct-forcing method (<span class="citation">Krishnan (2015)</span>).</p>
    <p>cuIBM is written in C++ and exploits NVIDIA GPU hardware using CUDA and <a href="https://github.com/cusplibrary/cusplibrary">CUSP</a>, an open-source C++ library for sparse linear algebra on CUDA-capable GPUs. cuIBM solves the linear systems of equations and applies stencil operations on a single GPU device.</p>
    <p>cuIBM generated the results published in <span class="citation">Krishnan et al. (2014)</span>, a study of gliding-snake aerodynamics using an anatomically accurate cross-section of the snake <em>Chrysopelea Paradisi</em>.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-FadlunEtAl2000">
    <p>Fadlun, EA, R Verzicco, Paolo Orlandi, and J Mohd-Yusof. 2000. “Combined Immersed-Boundary Finite-Difference Methods for Three-Dimensional Complex Flow Simulations.” <em>Journal of Computational Physics</em> 161 (1). Elsevier: 35–60. doi:<a href="https://doi.org/10.1006/jcph.2000.6484">10.1006/jcph.2000.6484</a>.</p>
    </div>
    <div id="ref-Krishnan2015">
    <p>Krishnan, Anush. 2015. “Towards the Study of Flying Snake Aerodynamics, and an Analysis of the Direct Forcing Method.” PhD thesis, Boston University.</p>
    </div>
    <div id="ref-KrishnanEtAl2014">
    <p>Krishnan, Anush, John J Socha, Pavlos P Vlachos, and LA Barba. 2014. “Lift and Wakes of Flying Snakes.” <em>Physics of Fluids</em> 26 (3). AIP: 031901. doi:<a href="https://doi.org/10.1063/1.4866444">10.1063/1.4866444</a>.</p>
    </div>
    <div id="ref-Perot1993">
    <p>Perot, J Blair. 1993. “An Analysis of the Fractional Step Method.” <em>Journal of Computational Physics</em> 108 (1). Elsevier: 51–58. doi:<a href="https://doi.org/10.1006/jcph.1993.1162">10.1006/jcph.1993.1162</a>.</p>
    </div>
    <div id="ref-TairaColonius2007">
    <p>Taira, Kunihiko, and Tim Colonius. 2007. “The Immersed Boundary Method: A Projection Approach.” <em>Journal of Computational Physics</em> 225 (2). Elsevier: 2118–37. doi:<a href="https://doi.org/10.1016/j.jcp.2007.03.005">10.1016/j.jcp.2007.03.005</a>.</p>
    </div>
    </div>
  </body>
</article>
