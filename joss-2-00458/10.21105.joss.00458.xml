<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>DynamicalBilliards.jl: An easy-to-use, modular and extendable Julia package for Dynamical Billiard systems in two dimensions.</title>
    <authors>
      <author>
        <name>George Datseris</name>
        <orcid>0000-0002-6427-2385</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>billiards</tag>
      <tag>physics</tag>
      <tag>chaos</tag>
      <tag>escape</tag>
      <tag>obstacle</tag>
    </tags>
    <date>26 October 2017</date>
    <paper_doi>10.21105/joss.00458</paper_doi>
    <software_repository>https://github.com/JuliaDynamics/DynamicalBilliards.jl</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.1059092</software_archive>
    <paper_url>http://www.theoj.org/joss-papers/joss.00458/10.21105.joss.00458.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p><a href="http://orcid.org/0000-0002-6427-2385">DynamicalBilliards.jl</a> is a package about two-dimensional (dynamical) billiard systems written in its entirety in Julia. It is easy to use, and easy to be extended. It is accompanied by a <a href="https://juliadynamics.github.io/DynamicalBilliards.jl/stable/">detailed documentation archive</a> with a lot of tutorials, example code as well as information about the physical algorithms at play.</p>
    <p>The package is mainly used to simulate any kind of two-dimensional system where particle motion is interrupted by collisions, e.g., a gas infused with big molecules.</p>
    <h1 id="features">Features</h1>
    <p>The features of the DynamicalBilliards.jl, as of version v1.6.1, are:</p>
    <ul>
    <li>Modular creation of a billiard table by putting together well-defined obstacles.</li>
    <li>Creation of random initial conditions in any user-created billiard table.</li>
    <li>Propagation of point particles in such billiard tables.</li>
    <li>Propagation of point particles in such billiard tables in magnetic fields.</li>
    <li>Exact calculation of the collision times, collision positions, velocities etc..</li>
    <li>Calculation of escape times of particles.</li>
    <li>Rich implementation of Ray-splitting billiards: A particle may propagate through an obstacle, given some arbitrary transmission probability.</li>
    <li>Calculation of Lyapunov exponents of trajectories (currently available only for propagation without magnetic fields).</li>
    <li>Flexible speed; users can trade between accuracy and speed.</li>
    <li>Extensive visualization library for plotting and animating particles and billiards.</li>
    </ul>
    <h1 id="description">Description</h1>
    <p>Billiard systems have been used extensively in scientific research and played a crucial role in the development of Chaos theory. A famous example is the Sinai billiard (easily simulated with our package) which was one of the first low-dimensional systems proven to be ergodic <span class="citation">(Sinai 1970)</span>.</p>
    <p>Even though the study of billiard systems started decades ago, there are still new surprises and plenty of research to be done with them. Bunimovich and Vela-Arevalo (two pioneers in the field) summarized new insights in the field of dynamical billiards <span class="citation">(Bunimovich and Vela-Arevalo 2015)</span>.</p>
    <p>Our package has plenty of applications, due to the large amount of features. In <span class="citation">(Datseris, Geisel, and Fleischmann 2017)</span> we have used it to approximate the movement of electrons in graphene, a two-dimensional semiconductor. Another application would be the motion of a particle in a gas composed of molecules much bigger than the particle, such that the collisions leave the molecules stationary. In addition, DynamicalBilliards.jl offers the first time possibility of implementing ray-splitting billiards, since, to the best of our knowledge, there is no other open sourced project that offers this. Ray-splitting is powerful as it allows one to simulate particles that tunnel through obstacles, much like a quantum particle. At the end of this paper we provide an example application in a periodic gas-like system. Finally, one more example application would be calculating the escape time of a particle in a maze of obstacles.</p>
    <p>The package is written in pure Julia <span class="citation">(Bezanson et al. 2017)</span> a new programming language with many advantages. Because Julia is dynamic, it allows users to experiment with billiards flexibly and interactively and have access to a very easy-to-use high level interface. On the other hand, because Julia is as fast as C, there is no worry about the speed of the algorithms.</p>
    <p>Another advantage of using Julia is that the source code is clear, concise and very easy to understand even for beginners. This allows our package to be extendable in an almost trivial manner. In fact, in one of our <a href="https://juliadynamics.github.io/DynamicalBilliards.jl/latest/tutorials/own_obstacle/">tutorial pages</a> we show users that all they need to do to define a completely new type of <code>Obstacle</code> (the things particles collide with) is only four functions, with an average of just 50 lines of code in total. Everything else is taken care of with the modular approach of our package and the power of abstraction that Julia provides.</p>
    <p>DynamicalBilliards.jl calculates exactly all collisions between particles and obstacles, by solving 1st and 2nd order polynomial equations, which results in accuracies of the order of <code>1e-14</code> (for 64-bit floating point numbers). For this to work, particles are considered point particles. This advantage of exact solutions however also comes with a drawback: our package currently does not support (a) interactions between particles and (b) external electrostatic potentials.</p>
    <p>We would like to bring into attention another new billiard package, called &quot;Bill2D&quot; <span class="citation">(Solanpää, Luukko, and Räsänen 2016)</span>, which is written in C instead, and supports interactions between particles. There is a some amount of overlap between DynamicalBilliards.jl and Bill2D, however both packages offer a lot of unique features not included in each other.</p>
    <h1 id="example">Example</h1>
    <p><img src="periodic_billiard.png" alt="Periodic Billiard" /> In the figure we show an example application of our package. A tiny particle (blue color) is propagating in a gas of periodically located large molecules (green color). Because the mass and size of the molecules is much bigger than that of the particle, we can accept that the collisions leave the molecules unmoved.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Julia">
    <p>Bezanson, Jeff, Alan Edelman, Stefan Karpinski, and Viral B. Shah. 2017. “Julia: A Fresh Approach to Numerical Computing.” <em>SIAM Review</em> 59 (1): 65–98. doi:<a href="https://doi.org/10.1137/141000671">10.1137/141000671</a>.</p>
    </div>
    <div id="ref-Bunimovich2015">
    <p>Bunimovich, Leonid A., and Luz V. Vela-Arevalo. 2015. “Some new surprises in chaos (billiards).” <em>Chaos</em> 25 (9). doi:<a href="https://doi.org/10.1063/1.4916330">10.1063/1.4916330</a>.</p>
    </div>
    <div id="ref-Datseris">
    <p>Datseris, G., T. Geisel, and R. Fleischmann. 2017. “Robustness of ballistic transport features in antidot superlattices.” <em>ArXiv E-Prints</em>, November.</p>
    </div>
    <div id="ref-Sinai1970">
    <p>Sinai, Yakov G. 1970. “Dynamical systems with elastic reflections.” <em>Russian Mathematical Surveys</em> 25 (2): 137. doi:<a href="https://doi.org/10.1070/RM1970v025n02ABEH003794">10.1070/RM1970v025n02ABEH003794</a>.</p>
    </div>
    <div id="ref-Solanpaa2016">
    <p>Solanpää, J., P. J.J. Luukko, and E. Räsänen. 2016. “Bill2d - A software package for classical two-dimensional Hamiltonian systems.” <em>Computer Physics Communications</em> 199. Elsevier B.V.: 133–38. doi:<a href="https://doi.org/10.1016/j.cpc.2015.10.006">10.1016/j.cpc.2015.10.006</a>.</p>
    </div>
    </div>
  </body>
</article>
