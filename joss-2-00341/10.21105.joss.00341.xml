<?xml version="1.0" encoding="utf-8" ?>
<article>
  <articleinfo>
    <title>Pipengine: an ultra light YAML-based pipeline execution engine</title>
    <authors>
      <author>
        <name>Francesco Strozzi</name>
        <orcid>0000-0002-6845-6982</orcid>
        <affiliation>
          <orgname>
            1
          </orgname>
        </affiliation>
      </author>
      <author>
        <name>Raoul Jean Pierre Bonnal</name>
        <orcid>0000-0002-2123-6536</orcid>
        <affiliation>
          <orgname>
            2
          </orgname>
        </affiliation>
      </author>
    </authors>
    <tags>
      <tag>pipeline</tag>
      <tag>workflows</tag>
      <tag>reproducibility</tag>
    </tags>
    <date>25 July 2017</date>
    <paper_doi>10.21105/joss.00341</paper_doi>
    <software_repository>https://github.com/fstrozzi/bioruby-pipengine</software_repository>
    <software_archive>http://dx.doi.org/10.5281/zenodo.851892</software_archive>
    <paper_url>https://github.com/openjournals/joss-papers/raw/master/joss.00341/10.21105.joss.00341.pdf</paper_url>
  </articleinfo>
  <body>
    <h1 id="summary">Summary</h1>
    <p>This is an ultra light YAML-based pipeline execution engine. The tool allows defining a pipeline template in YAML, specifying command lines, resources and software to be used along with pipeline steps dependencies. Pipengine is a sample-centric tool, so the pipeline can then be applied over a single sample or multiple samples data, generating actual runnable bash scripts which can then be submitted automatically to a scheduling system or run locally.</p>
    <p>The bash scripts generated by Pipengine includes a list of features such as:</p>
    <ul>
    <li><p>error controls and logging for each step</p></li>
    <li><p>the automated generation of directories based on sample and pipeline steps names</p></li>
    <li><p>the moving of input and output data across original and temporary folders if needed</p></li>
    <li><p>a simple checkpoint strategy to avoid re-running already completed steps in a pipeline.</p></li>
    </ul>
    <p>All these features prevent the users to write boiler plate code to perform all these necessary accessory tasks.</p>
    <p>Moreover, Pipengine creates a stable and reproducible working and output tree for each analysis, which transparently stores all the results of each step of a pipeline for each sample analyzed. In this way pipelines' intermediate or final results can be predictably accessed by the analysts and/or easily parsed with other tools.</p>
    <p>The software was developed back in 2012, when more generalized schemas such as for instance the Common Workflow Language <span class="citation">(Language 2017)</span> were not yet defined, and thus was among the firsts utilities to introduce the concept of using simple YAML as a template format to define reusable bioinformatics pipelines.</p>
    <p>Pipengine has been used across several research groups and bioinformatics core facilities since its first appearance. It directly supports the PBS/Torque scheduler <span class="citation">(Inc. 2017)</span> for submission of jobs, but given that the support for a scheduler is based on specific options written automatically inside the bash scripts generated by the tool, it can be easily adapted to work with other schedulers, if needed.</p>
    <p>Pipengine is written in Ruby and is available for download as a BioRuby Gem <span class="citation">(Goto N 2010; Bonnal RJP 2012)</span>.</p>
    <h1 id="references" class="unnumbered">References</h1>
    <div id="refs" class="references">
    <div id="ref-Bonnal2012">
    <p>Bonnal RJP, Githinji G, Aerts J. 2012. “Biogem: An Effective Tool-Based Approach for Scaling up Open Source Software Development in Bioinformatics.” <em>Bioinformatics</em>. doi:<a href="https://doi.org/doi.org/10.1093/bioinformatics/bts080">doi.org/10.1093/bioinformatics/bts080</a>.</p>
    </div>
    <div id="ref-Goto2010">
    <p>Goto N, Nakao M, Prins P. 2010. “Bioinformatics Software for the Ruby Programming Language.” <em>Bioinformatics</em>. doi:<a href="https://doi.org/doi.org/10.1093/bioinformatics/btq475">doi.org/10.1093/bioinformatics/btq475</a>.</p>
    </div>
    <div id="ref-Torque2017">
    <p>Inc., Adaptive Computing. 2017. “TORQUE Resource Manager.” <a href="http://www.adaptivecomputing.com/products/open-source/torque/" class="uri">http://www.adaptivecomputing.com/products/open-source/torque/</a>.</p>
    </div>
    <div id="ref-CWL2017">
    <p>Language, Common Workflow. 2017. “Common Workflow Language.” doi:<a href="https://doi.org/dx.doi.org/10.6084/m9.figshare.3115156.v2">dx.doi.org/10.6084/m9.figshare.3115156.v2</a>.</p>
    </div>
    </div>
  </body>
</article>
